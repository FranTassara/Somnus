# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'RecorderV3.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from pyqtgraph import GraphicsLayoutWidget

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from pyqtgraph import GraphicsLayoutWidget
from os import sep
import time
import pandas as pd
import serial
import numpy as np
from brainflow.board_shim import BoardShim, BrainFlowInputParams, BoardIds
from brainflow.data_filter import DataFilter, NoiseTypes, FilterTypes

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1100, 900)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setMinimumSize(QtCore.QSize(1100, 900))
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.tab.setObjectName("tab")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame = QtWidgets.QFrame(self.tab)
        self.frame.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(205, 205, 205);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_4.setContentsMargins(3, 2, 3, 2)
        self.horizontalLayout_4.setSpacing(2)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.groupBox_8 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_8.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 10pt \"MS Shell Dlg 2\";")
        self.groupBox_8.setObjectName("groupBox_8")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.groupBox_8)
        self.verticalLayout_8.setContentsMargins(4, 3, 4, 3)
        self.verticalLayout_8.setSpacing(2)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.cyton_stream = QtWidgets.QPushButton(self.groupBox_8)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.cyton_stream.setFont(font)
        self.cyton_stream.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(208, 4, 4);")
        self.cyton_stream.setObjectName("cyton_stream")
        self.verticalLayout_8.addWidget(self.cyton_stream)
        self.cyton_stream.clicked.connect(self.connect_cyton)

        self.MA_A_stream = QtWidgets.QPushButton(self.groupBox_8)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.MA_A_stream.setFont(font)
        self.MA_A_stream.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(208, 4, 4);")
        self.MA_A_stream.setObjectName("MA_A_stream")
        self.verticalLayout_8.addWidget(self.MA_A_stream)
        self.MA_A_stream.clicked.connect(self.connect_arduinoA)

        self.MA_B_stream = QtWidgets.QPushButton(self.groupBox_8)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.MA_B_stream.setFont(font)
        self.MA_B_stream.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(208, 4, 4);")
        self.MA_B_stream.setObjectName("MA_B_stream")
        self.verticalLayout_8.addWidget(self.MA_B_stream)
        self.MA_B_stream.clicked.connect(self.connect_arduinoB)

        self.MA_C_stream = QtWidgets.QPushButton(self.groupBox_8)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.MA_C_stream.setFont(font)
        self.MA_C_stream.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(208, 4, 4);")
        self.MA_C_stream.setObjectName("MA_C_stream")
        self.verticalLayout_8.addWidget(self.MA_C_stream)
        self.MA_C_stream.clicked.connect(self.connect_arduinoC)

        self.horizontalLayout_4.addWidget(self.groupBox_8)
        self.groupBox = QtWidgets.QGroupBox(self.frame)
        self.groupBox.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 10pt \"MS Shell Dlg 2\";")
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.groupBox)
        self.horizontalLayout.setContentsMargins(3, 1, 3, 1)
        self.horizontalLayout.setSpacing(3)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox_4)
        self.verticalLayout_3.setContentsMargins(4, 1, 4, 1)
        self.verticalLayout_3.setSpacing(2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.stream_ch1 = QtWidgets.QCheckBox(self.groupBox_4)
        self.stream_ch1.setEnabled(False)
        self.stream_ch1.setChecked(True)
        self.stream_ch1.setAutoRepeat(False)
        self.stream_ch1.setObjectName("stream_ch1")
        self.verticalLayout_3.addWidget(self.stream_ch1)
        self.stream_ch2 = QtWidgets.QCheckBox(self.groupBox_4)
        self.stream_ch2.setEnabled(False)
        self.stream_ch2.setChecked(True)
        self.stream_ch2.setObjectName("stream_ch2")
        self.verticalLayout_3.addWidget(self.stream_ch2)
        self.stream_ch3 = QtWidgets.QCheckBox(self.groupBox_4)
        self.stream_ch3.setEnabled(False)
        self.stream_ch3.setChecked(True)
        self.stream_ch3.setObjectName("stream_ch3")
        self.verticalLayout_3.addWidget(self.stream_ch3)
        self.stream_ch4 = QtWidgets.QCheckBox(self.groupBox_4)
        self.stream_ch4.setEnabled(False)
        self.stream_ch4.setChecked(True)
        self.stream_ch4.setObjectName("stream_ch4")
        self.verticalLayout_3.addWidget(self.stream_ch4)
        self.stream_ch5 = QtWidgets.QCheckBox(self.groupBox_4)
        self.stream_ch5.setEnabled(False)
        self.stream_ch5.setChecked(True)
        self.stream_ch5.setObjectName("stream_ch5")
        self.verticalLayout_3.addWidget(self.stream_ch5)
        self.stream_ch6 = QtWidgets.QCheckBox(self.groupBox_4)
        self.stream_ch6.setEnabled(False)
        self.stream_ch6.setChecked(True)
        self.stream_ch6.setObjectName("stream_ch6")
        self.verticalLayout_3.addWidget(self.stream_ch6)
        self.stream_ch7 = QtWidgets.QCheckBox(self.groupBox_4)
        self.stream_ch7.setEnabled(False)
        self.stream_ch7.setChecked(True)
        self.stream_ch7.setObjectName("stream_ch7")
        self.verticalLayout_3.addWidget(self.stream_ch7)
        self.stream_ch8 = QtWidgets.QCheckBox(self.groupBox_4)
        self.stream_ch8.setEnabled(False)
        self.stream_ch8.setChecked(True)
        self.stream_ch8.setObjectName("stream_ch8")
        self.verticalLayout_3.addWidget(self.stream_ch8)
        self.horizontalLayout.addWidget(self.groupBox_4)
        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_5.setObjectName("groupBox_5")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox_5)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.stream_s1 = QtWidgets.QCheckBox(self.groupBox_5)
        self.stream_s1.setEnabled(False)
        self.stream_s1.setObjectName("stream_s1")
        self.verticalLayout_4.addWidget(self.stream_s1)
        self.stream_s2 = QtWidgets.QCheckBox(self.groupBox_5)
        self.stream_s2.setEnabled(False)
        self.stream_s2.setObjectName("stream_s2")
        self.verticalLayout_4.addWidget(self.stream_s2)
        self.stream_s3 = QtWidgets.QCheckBox(self.groupBox_5)
        self.stream_s3.setEnabled(False)
        self.stream_s3.setObjectName("stream_s3")
        self.verticalLayout_4.addWidget(self.stream_s3)
        self.stream_s4 = QtWidgets.QCheckBox(self.groupBox_5)
        self.stream_s4.setEnabled(False)
        self.stream_s4.setObjectName("stream_s4")
        self.verticalLayout_4.addWidget(self.stream_s4)
        self.stream_s5 = QtWidgets.QCheckBox(self.groupBox_5)
        self.stream_s5.setEnabled(False)
        self.stream_s5.setObjectName("stream_s5")
        self.verticalLayout_4.addWidget(self.stream_s5)
        self.horizontalLayout.addWidget(self.groupBox_5)
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_6.setObjectName("groupBox_6")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBox_6)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.stream_s6 = QtWidgets.QCheckBox(self.groupBox_6)
        self.stream_s6.setEnabled(False)
        self.stream_s6.setObjectName("stream_s6")
        self.verticalLayout_6.addWidget(self.stream_s6)
        self.stream_s7 = QtWidgets.QCheckBox(self.groupBox_6)
        self.stream_s7.setEnabled(False)
        self.stream_s7.setObjectName("stream_s7")
        self.verticalLayout_6.addWidget(self.stream_s7)
        self.stream_s8 = QtWidgets.QCheckBox(self.groupBox_6)
        self.stream_s8.setEnabled(False)
        self.stream_s8.setObjectName("stream_s8")
        self.verticalLayout_6.addWidget(self.stream_s8)
        self.stream_s9 = QtWidgets.QCheckBox(self.groupBox_6)
        self.stream_s9.setEnabled(False)
        self.stream_s9.setObjectName("stream_s9")
        self.verticalLayout_6.addWidget(self.stream_s9)
        self.stream_s10 = QtWidgets.QCheckBox(self.groupBox_6)
        self.stream_s10.setEnabled(False)
        self.stream_s10.setObjectName("stream_s10")
        self.verticalLayout_6.addWidget(self.stream_s10)
        self.horizontalLayout.addWidget(self.groupBox_6)
        self.groupBox_12 = QtWidgets.QGroupBox(self.groupBox)
        self.groupBox_12.setObjectName("groupBox_12")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.groupBox_12)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.stream_s11 = QtWidgets.QCheckBox(self.groupBox_12)
        self.stream_s11.setEnabled(False)
        self.stream_s11.setObjectName("stream_s11")
        self.verticalLayout_21.addWidget(self.stream_s11)
        self.stream_s12 = QtWidgets.QCheckBox(self.groupBox_12)
        self.stream_s12.setEnabled(False)
        self.stream_s12.setObjectName("stream_s12")
        self.verticalLayout_21.addWidget(self.stream_s12)
        self.stream_s13 = QtWidgets.QCheckBox(self.groupBox_12)
        self.stream_s13.setEnabled(False)
        self.stream_s13.setObjectName("stream_s13")
        self.verticalLayout_21.addWidget(self.stream_s13)
        self.stream_s14 = QtWidgets.QCheckBox(self.groupBox_12)
        self.stream_s14.setEnabled(False)
        self.stream_s14.setObjectName("stream_s14")
        self.verticalLayout_21.addWidget(self.stream_s14)
        self.stream_s15 = QtWidgets.QCheckBox(self.groupBox_12)
        self.stream_s15.setEnabled(False)
        self.stream_s15.setObjectName("stream_s15")
        self.verticalLayout_21.addWidget(self.stream_s15)
        self.horizontalLayout.addWidget(self.groupBox_12)
        self.horizontalLayout_4.addWidget(self.groupBox)
        self.groupBox_7 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_7.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 10pt \"MS Shell Dlg 2\";")
        self.groupBox_7.setObjectName("groupBox_7")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.groupBox_7)
        self.verticalLayout_9.setContentsMargins(3, 2, 3, 2)
        self.verticalLayout_9.setSpacing(4)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.notch_stream = QtWidgets.QCheckBox(self.groupBox_7)
        self.notch_stream.setObjectName("notch_stream")
        self.verticalLayout_9.addWidget(self.notch_stream)
        self.pb1_stream = QtWidgets.QRadioButton(self.groupBox_7)
        self.pb1_stream.setObjectName("pb1_stream")
        self.verticalLayout_9.addWidget(self.pb1_stream)
        self.pb2_stream = QtWidgets.QRadioButton(self.groupBox_7)
        self.pb2_stream.setObjectName("pb2_stream")
        self.verticalLayout_9.addWidget(self.pb2_stream)
        self.pb3_stream = QtWidgets.QRadioButton(self.groupBox_7)
        self.pb3_stream.setObjectName("pb3_stream")
        self.verticalLayout_9.addWidget(self.pb3_stream)
        self.pb4_stream = QtWidgets.QRadioButton(self.groupBox_7)
        self.pb4_stream.setObjectName("pb4_stream")
        self.verticalLayout_9.addWidget(self.pb4_stream)
        self.pb5_stream = QtWidgets.QRadioButton(self.groupBox_7)
        self.pb5_stream.setObjectName("pb5_stream")
        self.verticalLayout_9.addWidget(self.pb5_stream)
        self.horizontalLayout_4.addWidget(self.groupBox_7)
        self.groupBox_9 = QtWidgets.QGroupBox(self.frame)
        self.groupBox_9.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 10pt \"MS Shell Dlg 2\";")
        self.groupBox_9.setObjectName("groupBox_9")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.groupBox_9)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.select_stream = QtWidgets.QComboBox(self.groupBox_9)
        self.select_stream.setStyleSheet("font: 10pt \"MS Shell Dlg 2\";\n"
"color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        self.select_stream.setObjectName("select_stream")
        self.verticalLayout_7.addWidget(self.select_stream)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.start_stream = QtWidgets.QPushButton(self.groupBox_9)
        self.start_stream.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.start_stream.setFont(font)
        self.start_stream.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(3, 170, 3);")
        self.start_stream.setObjectName("start_stream")
        self.horizontalLayout_3.addWidget(self.start_stream)
        self.start_stream.clicked.connect(self.startStream)

        self.stop_stream = QtWidgets.QPushButton(self.groupBox_9)
        self.stop_stream.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.stop_stream.setFont(font)
        self.stop_stream.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(208, 4, 4);")
        self.stop_stream.setObjectName("stop_stream")
        self.horizontalLayout_3.addWidget(self.stop_stream)
        self.stop_stream.clicked.connect(self.stopStream)

        self.verticalLayout_7.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.groupBox_9)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(0, 0, 0);")
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.ventanaTemp_stream = QtWidgets.QSpinBox(self.groupBox_9)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.ventanaTemp_stream.setFont(font)
        self.ventanaTemp_stream.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.ventanaTemp_stream.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.ventanaTemp_stream.setButtonSymbols(QtWidgets.QAbstractSpinBox.UpDownArrows)
        self.ventanaTemp_stream.setMinimum(1)
        self.ventanaTemp_stream.setObjectName("ventanaTemp_stream")
        self.horizontalLayout_2.addWidget(self.ventanaTemp_stream)
        self.verticalLayout_7.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_4.addWidget(self.groupBox_9)
        self.horizontalLayout_4.setStretch(0, 1)
        self.horizontalLayout_4.setStretch(1, 2)
        self.horizontalLayout_4.setStretch(2, 1)
        self.horizontalLayout_4.setStretch(3, 1)
        self.verticalLayout_2.addWidget(self.frame)
        self.graphicsView = GraphicsLayoutWidget(self.tab)
        self.graphicsView.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.graphicsView.setObjectName("graphicsView")
        self.verticalLayout_2.addWidget(self.graphicsView)
        self.verticalLayout_2.setStretch(1, 10)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.tab_2)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(1)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.groupBox_2 = QtWidgets.QGroupBox(self.tab_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setStyleSheet("background-color: rgb(57, 57, 57);\n"
"color: rgb(255, 255, 255);")
        self.groupBox_2.setObjectName("groupBox_2")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.groupBox_2)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.groupBox_15 = QtWidgets.QGroupBox(self.groupBox_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_15.setFont(font)
        self.groupBox_15.setObjectName("groupBox_15")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.groupBox_15)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_2 = QtWidgets.QLabel(self.groupBox_15)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_11.addWidget(self.label_2)
        self.nombre_paciente = QtWidgets.QLineEdit(self.groupBox_15)
        self.nombre_paciente.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.nombre_paciente.setObjectName("nombre_paciente")
        self.horizontalLayout_11.addWidget(self.nombre_paciente)
        self.verticalLayout_10.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_3 = QtWidgets.QLabel(self.groupBox_15)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_12.addWidget(self.label_3)
        self.apellido = QtWidgets.QLineEdit(self.groupBox_15)
        self.apellido.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.apellido.setObjectName("apellido")
        self.horizontalLayout_12.addWidget(self.apellido)
        self.verticalLayout_10.addLayout(self.horizontalLayout_12)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.label_4 = QtWidgets.QLabel(self.groupBox_15)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_13.addWidget(self.label_4)
        self.fecha_nac = QtWidgets.QDateEdit(self.groupBox_15)
        self.fecha_nac.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        self.fecha_nac.setObjectName("fecha_nac")
        self.horizontalLayout_13.addWidget(self.fecha_nac)
        self.verticalLayout_10.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.label_5 = QtWidgets.QLabel(self.groupBox_15)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_14.addWidget(self.label_5)
        self.dni = QtWidgets.QLineEdit(self.groupBox_15)
        self.dni.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.dni.setObjectName("dni")
        self.horizontalLayout_14.addWidget(self.dni)
        self.verticalLayout_10.addLayout(self.horizontalLayout_14)
        self.horizontalLayout_5.addWidget(self.groupBox_15)
        self.groupBox_16 = QtWidgets.QGroupBox(self.groupBox_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_16.setFont(font)
        self.groupBox_16.setObjectName("groupBox_16")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.groupBox_16)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.label_7 = QtWidgets.QLabel(self.groupBox_16)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_15.addWidget(self.label_7)
        self.fecha_estudio = QtWidgets.QDateEdit(self.groupBox_16)
        self.fecha_estudio.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        self.fecha_estudio.setDateTime(QtCore.QDateTime(QtCore.QDate(2021, 1, 1), QtCore.QTime(0, 0, 0)))
        self.fecha_estudio.setObjectName("fecha_estudio")
        self.horizontalLayout_15.addWidget(self.fecha_estudio)
        self.verticalLayout_17.addLayout(self.horizontalLayout_15)
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.label_8 = QtWidgets.QLabel(self.groupBox_16)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_16.addWidget(self.label_8)
        self.nombre_archivo = QtWidgets.QLineEdit(self.groupBox_16)
        self.nombre_archivo.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.nombre_archivo.setObjectName("nombre_archivo")
        self.horizontalLayout_16.addWidget(self.nombre_archivo)
        self.verticalLayout_17.addLayout(self.horizontalLayout_16)
        self.horizontalLayout_5.addWidget(self.groupBox_16)
        self.groupBox_18 = QtWidgets.QGroupBox(self.groupBox_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_18.setFont(font)
        self.groupBox_18.setObjectName("groupBox_18")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.groupBox_18)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.comentarios_estudio = QtWidgets.QTextEdit(self.groupBox_18)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comentarios_estudio.setFont(font)
        self.comentarios_estudio.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.comentarios_estudio.setObjectName("comentarios_estudio")
        self.verticalLayout_18.addWidget(self.comentarios_estudio)
        self.horizontalLayout_5.addWidget(self.groupBox_18)
        self.horizontalLayout_5.setStretch(0, 1)
        self.horizontalLayout_5.setStretch(1, 1)
        self.horizontalLayout_5.setStretch(2, 2)
        self.verticalLayout_5.addWidget(self.groupBox_2)
        self.frame_2 = QtWidgets.QFrame(self.tab_2)
        self.frame_2.setStyleSheet("background-color: rgb(205, 205, 205);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.groupBox_17 = QtWidgets.QGroupBox(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_17.setFont(font)
        self.groupBox_17.setObjectName("groupBox_17")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.groupBox_17)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.cyton_record = QtWidgets.QPushButton(self.groupBox_17)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.cyton_record.setFont(font)
        self.cyton_record.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(208, 4, 4);")
        self.cyton_record.setObjectName("cyton_record")
        self.verticalLayout_16.addWidget(self.cyton_record)
        self.cyton_record.clicked.connect(self.connect_cyton)

        self.MA_A_record = QtWidgets.QPushButton(self.groupBox_17)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.MA_A_record.setFont(font)
        self.MA_A_record.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(208, 4, 4);")
        self.MA_A_record.setObjectName("MA_A_record")
        self.verticalLayout_16.addWidget(self.MA_A_record)
        self.MA_A_record.clicked.connect(self.connect_arduinoA)

        self.MA_B_record = QtWidgets.QPushButton(self.groupBox_17)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.MA_B_record.setFont(font)
        self.MA_B_record.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(208, 4, 4);")
        self.MA_B_record.setObjectName("MA_B_record")
        self.verticalLayout_16.addWidget(self.MA_B_record)
        self.MA_B_record.clicked.connect(self.connect_arduinoB)

        self.MA_C_record = QtWidgets.QPushButton(self.groupBox_17)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.MA_C_record.setFont(font)
        self.MA_C_record.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(208, 4, 4);")
        self.MA_C_record.setObjectName("MA_C_record")
        self.verticalLayout_16.addWidget(self.MA_C_record)
        self.MA_C_record.clicked.connect(self.connect_arduinoC)

        self.horizontalLayout_7.addWidget(self.groupBox_17)
        self.groupBox_3 = QtWidgets.QGroupBox(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setStyleSheet("color: rgb(0, 0, 0);")
        self.groupBox_3.setObjectName("groupBox_3")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.groupBox_3)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.groupBox_11 = QtWidgets.QGroupBox(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_11.setFont(font)
        self.groupBox_11.setObjectName("groupBox_11")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.groupBox_11)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.record_ch1 = QtWidgets.QCheckBox(self.groupBox_11)
        self.record_ch1.setEnabled(False)
        self.record_ch1.setChecked(True)
        self.record_ch1.setObjectName("record_ch1")
        self.verticalLayout_12.addWidget(self.record_ch1)
        self.record_ch2 = QtWidgets.QCheckBox(self.groupBox_11)
        self.record_ch2.setEnabled(False)
        self.record_ch2.setChecked(True)
        self.record_ch2.setObjectName("record_ch2")
        self.verticalLayout_12.addWidget(self.record_ch2)
        self.record_ch3 = QtWidgets.QCheckBox(self.groupBox_11)
        self.record_ch3.setEnabled(False)
        self.record_ch3.setChecked(True)
        self.record_ch3.setObjectName("record_ch3")
        self.verticalLayout_12.addWidget(self.record_ch3)
        self.record_ch4 = QtWidgets.QCheckBox(self.groupBox_11)
        self.record_ch4.setEnabled(False)
        self.record_ch4.setChecked(True)
        self.record_ch4.setObjectName("record_ch4")
        self.verticalLayout_12.addWidget(self.record_ch4)
        self.record_ch5 = QtWidgets.QCheckBox(self.groupBox_11)
        self.record_ch5.setEnabled(False)
        self.record_ch5.setChecked(True)
        self.record_ch5.setObjectName("record_ch5")
        self.verticalLayout_12.addWidget(self.record_ch5)
        self.record_ch6 = QtWidgets.QCheckBox(self.groupBox_11)
        self.record_ch6.setEnabled(False)
        self.record_ch6.setChecked(True)
        self.record_ch6.setObjectName("record_ch6")
        self.verticalLayout_12.addWidget(self.record_ch6)
        self.record_ch7 = QtWidgets.QCheckBox(self.groupBox_11)
        self.record_ch7.setEnabled(False)
        self.record_ch7.setChecked(True)
        self.record_ch7.setObjectName("record_ch7")
        self.verticalLayout_12.addWidget(self.record_ch7)
        self.record_ch8 = QtWidgets.QCheckBox(self.groupBox_11)
        self.record_ch8.setEnabled(False)
        self.record_ch8.setChecked(True)
        self.record_ch8.setObjectName("record_ch8")
        self.verticalLayout_12.addWidget(self.record_ch8)
        self.horizontalLayout_6.addWidget(self.groupBox_11)
        self.groupBox_13 = QtWidgets.QGroupBox(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_13.setFont(font)
        self.groupBox_13.setObjectName("groupBox_13")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.groupBox_13)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.record_s1 = QtWidgets.QCheckBox(self.groupBox_13)
        self.record_s1.setEnabled(False)
        self.record_s1.setObjectName("record_s1")
        self.verticalLayout_15.addWidget(self.record_s1)
        self.record_s2 = QtWidgets.QCheckBox(self.groupBox_13)
        self.record_s2.setEnabled(False)
        self.record_s2.setObjectName("record_s2")
        self.verticalLayout_15.addWidget(self.record_s2)
        self.record_s3 = QtWidgets.QCheckBox(self.groupBox_13)
        self.record_s3.setEnabled(False)
        self.record_s3.setObjectName("record_s3")
        self.verticalLayout_15.addWidget(self.record_s3)
        self.record_s4 = QtWidgets.QCheckBox(self.groupBox_13)
        self.record_s4.setEnabled(False)
        self.record_s4.setObjectName("record_s4")
        self.verticalLayout_15.addWidget(self.record_s4)
        self.record_s5 = QtWidgets.QCheckBox(self.groupBox_13)
        self.record_s5.setEnabled(False)
        self.record_s5.setObjectName("record_s5")
        self.verticalLayout_15.addWidget(self.record_s5)
        self.horizontalLayout_6.addWidget(self.groupBox_13)
        self.groupBox_14 = QtWidgets.QGroupBox(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_14.setFont(font)
        self.groupBox_14.setStyleSheet("")
        self.groupBox_14.setObjectName("groupBox_14")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.groupBox_14)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.record_s6 = QtWidgets.QCheckBox(self.groupBox_14)
        self.record_s6.setEnabled(False)
        self.record_s6.setObjectName("record_s6")
        self.verticalLayout_14.addWidget(self.record_s6)
        self.record_s7 = QtWidgets.QCheckBox(self.groupBox_14)
        self.record_s7.setEnabled(False)
        self.record_s7.setObjectName("record_s7")
        self.verticalLayout_14.addWidget(self.record_s7)
        self.record_s8 = QtWidgets.QCheckBox(self.groupBox_14)
        self.record_s8.setEnabled(False)
        self.record_s8.setObjectName("record_s8")
        self.verticalLayout_14.addWidget(self.record_s8)
        self.record_s9 = QtWidgets.QCheckBox(self.groupBox_14)
        self.record_s9.setEnabled(False)
        self.record_s9.setObjectName("record_s9")
        self.verticalLayout_14.addWidget(self.record_s9)
        self.record_s10 = QtWidgets.QCheckBox(self.groupBox_14)
        self.record_s10.setEnabled(False)
        self.record_s10.setObjectName("record_s10")
        self.verticalLayout_14.addWidget(self.record_s10)
        self.horizontalLayout_6.addWidget(self.groupBox_14)
        self.groupBox_19 = QtWidgets.QGroupBox(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_19.setFont(font)
        self.groupBox_19.setObjectName("groupBox_19")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout(self.groupBox_19)
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.record_s11 = QtWidgets.QCheckBox(self.groupBox_19)
        self.record_s11.setEnabled(False)
        self.record_s11.setObjectName("record_s11")
        self.verticalLayout_22.addWidget(self.record_s11)
        self.record_s12 = QtWidgets.QCheckBox(self.groupBox_19)
        self.record_s12.setEnabled(False)
        self.record_s12.setObjectName("record_s12")
        self.verticalLayout_22.addWidget(self.record_s12)
        self.record_s13 = QtWidgets.QCheckBox(self.groupBox_19)
        self.record_s13.setEnabled(False)
        self.record_s13.setObjectName("record_s13")
        self.verticalLayout_22.addWidget(self.record_s13)
        self.record_s14 = QtWidgets.QCheckBox(self.groupBox_19)
        self.record_s14.setEnabled(False)
        self.record_s14.setObjectName("record_s14")
        self.verticalLayout_22.addWidget(self.record_s14)
        self.record_s15 = QtWidgets.QCheckBox(self.groupBox_19)
        self.record_s15.setEnabled(False)
        self.record_s15.setObjectName("record_s15")
        self.verticalLayout_22.addWidget(self.record_s15)
        self.horizontalLayout_6.addWidget(self.groupBox_19)
        self.horizontalLayout_7.addWidget(self.groupBox_3)
        self.groupBox_10 = QtWidgets.QGroupBox(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_10.setFont(font)
        self.groupBox_10.setObjectName("groupBox_10")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.groupBox_10)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.start_record = QtWidgets.QPushButton(self.groupBox_10)
        self.start_record.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.start_record.setFont(font)
        self.start_record.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(3, 170, 3);")
        self.start_record.setObjectName("start_record")
        self.horizontalLayout_8.addWidget(self.start_record)
        self.start_record.clicked.connect(self.startRecord)

        self.stop_record = QtWidgets.QPushButton(self.groupBox_10)
        self.stop_record.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.stop_record.setFont(font)
        self.stop_record.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(208, 4, 4);")
        self.stop_record.setObjectName("stop_record")
        self.horizontalLayout_8.addWidget(self.stop_record)
        self.stop_record.clicked.connect(self.stopRecord)

        self.verticalLayout_11.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_6 = QtWidgets.QLabel(self.groupBox_10)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_6.setFont(font)
        self.label_6.setStyleSheet("color: rgb(0, 0, 0);")
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_9.addWidget(self.label_6)
        self.durac_horas = QtWidgets.QSpinBox(self.groupBox_10)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.durac_horas.setFont(font)
        self.durac_horas.setStyleSheet("font: 11pt \"MS Shell Dlg 2\";\n"
"background-color: rgb(255, 255, 255);")
        self.durac_horas.setObjectName("durac_horas")
        self.horizontalLayout_9.addWidget(self.durac_horas)
        self.durac_min = QtWidgets.QSpinBox(self.groupBox_10)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.durac_min.setFont(font)
        self.durac_min.setStyleSheet("font: 11pt \"MS Shell Dlg 2\";\n"
"background-color: rgb(255, 255, 255);")
        self.durac_min.setObjectName("durac_min")
        self.horizontalLayout_9.addWidget(self.durac_min)
        self.verticalLayout_11.addLayout(self.horizontalLayout_9)
        self.horizontalLayout_7.addWidget(self.groupBox_10)
        self.horizontalLayout_7.setStretch(0, 1)
        self.horizontalLayout_7.setStretch(1, 2)
        self.horizontalLayout_7.setStretch(2, 1)
        self.verticalLayout_13.addLayout(self.horizontalLayout_7)
        self.terminal = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.terminal.setFont(font)
        self.terminal.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.terminal.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.terminal.setObjectName("terminal")
        self.verticalLayout_13.addWidget(self.terminal)
        self.verticalLayout_5.addWidget(self.frame_2)
        self.verticalLayout_5.setStretch(0, 3)
        self.verticalLayout_5.setStretch(1, 6)
        self.tabWidget.addTab(self.tab_2, "")
        self.verticalLayout.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #defino variables que se utilizan en las funciones
        self.connectedCy = False
        #self.connectedCD = False
        self.connectedA = False
        self.connectedB = False
        self.connectedC = False

        self.contador = 0

        self.path = "/home/pi/Desktop/PFC"
        #self.path = "C:/Users/Tassara"

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox_8.setTitle(_translate("MainWindow", "Establecer comunicación"))
        self.cyton_stream.setText(_translate("MainWindow", "Placa Cyton"))
        self.MA_A_stream.setText(_translate("MainWindow", "Módulo de adquisición A"))
        self.MA_B_stream.setText(_translate("MainWindow", "Módulo de adquisición B"))
        self.MA_C_stream.setText(_translate("MainWindow", "Módulo de adquisición C"))
        self.groupBox.setTitle(_translate("MainWindow", "Seleccionar señales"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Cyton"))
        self.stream_ch1.setText(_translate("MainWindow", "CH 1"))
        self.stream_ch2.setText(_translate("MainWindow", "CH 2"))
        self.stream_ch3.setText(_translate("MainWindow", "CH 3"))
        self.stream_ch4.setText(_translate("MainWindow", "CH 4"))
        self.stream_ch5.setText(_translate("MainWindow", "CH 5"))
        self.stream_ch6.setText(_translate("MainWindow", "CH 6"))
        self.stream_ch7.setText(_translate("MainWindow", "CH 7"))
        self.stream_ch8.setText(_translate("MainWindow", "CH 8"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Módulo A"))
        self.stream_s1.setText(_translate("MainWindow", "ECG"))
        self.stream_s2.setText(_translate("MainWindow", "EMG"))
        self.stream_s3.setText(_translate("MainWindow", "SIII"))
        self.stream_s4.setText(_translate("MainWindow", "SIV"))
        self.stream_s5.setText(_translate("MainWindow", "SV"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Módulo B"))
        self.stream_s6.setText(_translate("MainWindow", "SVI"))
        self.stream_s7.setText(_translate("MainWindow", "SVII"))
        self.stream_s8.setText(_translate("MainWindow", "SVIII"))
        self.stream_s9.setText(_translate("MainWindow", "SIX"))
        self.stream_s10.setText(_translate("MainWindow", "SX"))
        self.groupBox_12.setTitle(_translate("MainWindow", "Módulo C"))
        self.stream_s11.setText(_translate("MainWindow", "SXI"))
        self.stream_s12.setText(_translate("MainWindow", "SXII"))
        self.stream_s13.setText(_translate("MainWindow", "SXIII"))
        self.stream_s14.setText(_translate("MainWindow", "SXIV"))
        self.stream_s15.setText(_translate("MainWindow", "SXV"))
        self.groupBox_7.setTitle(_translate("MainWindow", "Aplicar filtros"))
        self.notch_stream.setText(_translate("MainWindow", "Notch (50 Hz)"))
        self.pb1_stream.setText(_translate("MainWindow", "Pasabanda (1-50 Hz)"))
        self.pb2_stream.setText(_translate("MainWindow", "Pasabanda (5-50 Hz)"))
        self.pb3_stream.setText(_translate("MainWindow", "Pasabanda (15-50 Hz)"))
        self.pb4_stream.setText(_translate("MainWindow", "Pasabanda (7-13 Hz)"))
        self.pb5_stream.setText(_translate("MainWindow", "Pasabanda (1-100 Hz)"))
        self.groupBox_9.setTitle(_translate("MainWindow", "Stream"))
        self.start_stream.setText(_translate("MainWindow", "COMENZAR"))
        self.stop_stream.setText(_translate("MainWindow", "DETENER"))
        self.label.setText(_translate("MainWindow", "Ventana Temporal [seg]"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "STREAM"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Datos"))
        self.groupBox_15.setTitle(_translate("MainWindow", "Paciente"))
        self.label_2.setText(_translate("MainWindow", "Nombre:"))
        self.label_3.setText(_translate("MainWindow", "Apellido:"))
        self.label_4.setText(_translate("MainWindow", "Fecha de nacimiento:"))
        self.label_5.setText(_translate("MainWindow", "DNI:"))
        self.groupBox_16.setTitle(_translate("MainWindow", "Estudio"))
        self.label_7.setText(_translate("MainWindow", "Fecha del estudio"))
        self.label_8.setText(_translate("MainWindow", "Nombre del archivo"))
        self.groupBox_18.setTitle(_translate("MainWindow", "Comentarios"))
        self.groupBox_17.setTitle(_translate("MainWindow", "Establecer comunicación"))
        self.cyton_record.setText(_translate("MainWindow", "Placa Cyton"))
        self.MA_A_record.setText(_translate("MainWindow", "Módulo de adquisición A"))
        self.MA_B_record.setText(_translate("MainWindow", "Módulo de adquisición B"))
        self.MA_C_record.setText(_translate("MainWindow", "Módulo de adquisición C"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Seleccionar señales"))
        self.groupBox_11.setTitle(_translate("MainWindow", "Cyton"))
        self.record_ch1.setText(_translate("MainWindow", "CH 1"))
        self.record_ch2.setText(_translate("MainWindow", "CH 2"))
        self.record_ch3.setText(_translate("MainWindow", "CH 3"))
        self.record_ch4.setText(_translate("MainWindow", "CH 4"))
        self.record_ch5.setText(_translate("MainWindow", "CH 5"))
        self.record_ch6.setText(_translate("MainWindow", "CH 6"))
        self.record_ch7.setText(_translate("MainWindow", "CH 7"))
        self.record_ch8.setText(_translate("MainWindow", "CH 8"))
        self.groupBox_13.setTitle(_translate("MainWindow", "Módulo A"))
        self.record_s1.setText(_translate("MainWindow", "ECG"))
        self.record_s2.setText(_translate("MainWindow", "EMG"))
        self.record_s3.setText(_translate("MainWindow", "SIII"))
        self.record_s4.setText(_translate("MainWindow", "SIV"))
        self.record_s5.setText(_translate("MainWindow", "SV"))
        self.groupBox_14.setTitle(_translate("MainWindow", "Módulo B"))
        self.record_s6.setText(_translate("MainWindow", "SVI"))
        self.record_s7.setText(_translate("MainWindow", "SVII"))
        self.record_s8.setText(_translate("MainWindow", "SVIII"))
        self.record_s9.setText(_translate("MainWindow", "SIX"))
        self.record_s10.setText(_translate("MainWindow", "SX"))
        self.groupBox_19.setTitle(_translate("MainWindow", "Módulo C"))
        self.record_s11.setText(_translate("MainWindow", "SXI"))
        self.record_s12.setText(_translate("MainWindow", "SXII"))
        self.record_s13.setText(_translate("MainWindow", "SXIII"))
        self.record_s14.setText(_translate("MainWindow", "SXIV"))
        self.record_s15.setText(_translate("MainWindow", "SXV"))
        self.groupBox_10.setTitle(_translate("MainWindow", "Grabar"))
        self.start_record.setText(_translate("MainWindow", "COMENZAR"))
        self.stop_record.setText(_translate("MainWindow", "DETENER"))
        self.label_6.setText(_translate("MainWindow", "Duración [hs][min]"))
        self.terminal.setText(_translate("MainWindow", "TERMINAL"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "GRABAR"))

    def connect_cyton(self):
        #SE ESTABLECE COMUNICACIÖN CON CYTHON
        #BoardShim.enable_board_logger()
        BoardShim.enable_dev_board_logger()
        params = BrainFlowInputParams()
        #params.serial_port = '/dev/ttyUSB0'
        params.serial_port = 'COM12'
        #params.timeout = 0
        #params.file = ''
        #board_id = BoardIds.SYNTHETIC_BOARD.value
        board_id = BoardIds.CYTON_BOARD.value
        self.board = BoardShim(board_id, params)
        self.board.prepare_session()

        self.cyton_stream.setStyleSheet("background-color : green")
        self.cyton_record.setStyleSheet("background-color : green")
        self.select_stream.addItem("Cyton")
        self.stream_ch1.setEnabled(True)
        self.stream_ch2.setEnabled(True)
        self.stream_ch3.setEnabled(True)
        self.stream_ch4.setEnabled(True)
        self.stream_ch5.setEnabled(True)
        self.stream_ch6.setEnabled(True)
        self.stream_ch7.setEnabled(True)
        self.stream_ch8.setEnabled(True)
        self.record_ch1.setEnabled(True)
        self.record_ch2.setEnabled(True)
        self.record_ch3.setEnabled(True)
        self.record_ch4.setEnabled(True)
        self.record_ch5.setEnabled(True)
        self.record_ch6.setEnabled(True)
        self.record_ch7.setEnabled(True)
        self.record_ch8.setEnabled(True)
        self.cyton_stream.setEnabled(False)
        self.cyton_record.setEnabled(False)
        self.start_stream.setEnabled(True)
        self.start_record.setEnabled(True)

        #if(self.connectedCD == False):
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.updateStreamCy)
        self.timerSR = QtCore.QTimer()
        self.timerSR.timeout.connect(self.recordOnlyCy)
        
        if self.connectedCy == False:
                self.terminal.setText(self.terminal.text() + "\nConexión exitosa con Cyton")
        self.connectedCy = True

#     def connect_cytonDaisy(self):
#         #SE ESTABLECE COMUNICACIÖN CON CYTHON
#         BoardShim.enable_board_logger()
#         params = BrainFlowInputParams()
#         params.serial_port = 'COM8'
#         #params.timeout = 0
#         #params.file = ''
#         #board_id = BoardIds.SYNTHETIC_BOARD.value
#         board_id = BoardIds.CYTON_DAISY_BOARD.value
#         self.boardDaisy = BoardShim(board_id, params)
#         self.boardDaisy.prepare_session()

#         self.cyton_daisy_stream.setStyleSheet("background-color : green")
#         self.cyton_record_daisy.setStyleSheet("background-color : green")
#         self.select_stream.addItem("Cyton + Daisy")
#         self.stream_ch1.setEnabled(True)
#         self.stream_ch2.setEnabled(True)
#         self.stream_ch3.setEnabled(True)
#         self.stream_ch4.setEnabled(True)
#         self.stream_ch5.setEnabled(True)
#         self.stream_ch6.setEnabled(True)
#         self.stream_ch7.setEnabled(True)
#         self.stream_ch8.setEnabled(True)
#         self.stream_ch9.setEnabled(True)
#         self.stream_ch10.setEnabled(True)
#         self.stream_ch11.setEnabled(True)
#         self.stream_ch12.setEnabled(True)
#         self.stream_ch13.setEnabled(True)
#         self.stream_ch14.setEnabled(True)
#         self.stream_ch15.setEnabled(True)
#         self.stream_ch16.setEnabled(True)
#         self.record_ch1.setEnabled(True)
#         self.record_ch2.setEnabled(True)
#         self.record_ch3.setEnabled(True)
#         self.record_ch4.setEnabled(True)
#         self.record_ch5.setEnabled(True)
#         self.record_ch6.setEnabled(True)
#         self.record_ch7.setEnabled(True)
#         self.record_ch8.setEnabled(True)
#         self.record_ch9.setEnabled(True)
#         self.record_ch10.setEnabled(True)
#         self.record_ch11.setEnabled(True)
#         self.record_ch12.setEnabled(True)
#         self.record_ch13.setEnabled(True)
#         self.record_ch14.setEnabled(True)
#         self.record_ch15.setEnabled(True)
#         self.record_ch16.setEnabled(True)
#         self.start_stream.setEnabled(True)
#         self.start_record.setEnabled(True)
#         self.cyton_daisy_stream.setEnabled(False)
#         self.cyton_record_daisy.setEnabled(False)
#         self.connectedCD = True

#         if(self.connectedCy == False):
#                 self.timer = QtCore.QTimer()
#                 self.timer.timeout.connect(self.updateStreamCy)
#                 self.timerSR = QtCore.QTimer()
#                 self.timerSR.timeout.connect(self.recordOnlyCy)
#         self.terminal.setText(self.terminal.text() + "\nConexión exitosa con Cyton + Daisy")

    def connect_arduinoA(self):
        self.serialArduinoA = serial.Serial(port='/dev/ttyACM0', baudrate=57600, bytesize=serial.EIGHTBITS, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, timeout=None)
        #self.serialArduinoA = serial.Serial(port='COM9', baudrate=57600, bytesize=serial.EIGHTBITS, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, timeout=None)
        time.sleep(1)

        self.MA_A_stream.setStyleSheet("background-color : green")
        self.MA_A_record.setStyleSheet("background-color : green")
        self.select_stream.addItem("Arduino A")
        self.stream_s1.setEnabled(True)
        self.stream_s2.setEnabled(True)
        self.stream_s3.setEnabled(True)
        self.stream_s4.setEnabled(True)
        self.stream_s5.setEnabled(True)
        self.record_s1.setEnabled(True)
        self.record_s2.setEnabled(True)
        self.record_s3.setEnabled(True)
        self.record_s4.setEnabled(True)
        self.record_s5.setEnabled(True)
        self.start_stream.setEnabled(True)
        self.start_record.setEnabled(True)

        self.MA_A_stream.setEnabled(False)
        self.MA_A_record.setEnabled(False)

        self.connectedA = True

        if(self.connectedB == False):
                self.timer2 = QtCore.QTimer()
                self.timer2.timeout.connect(self.updateStreamArd)
                self.timer3 = QtCore.QTimer()
                self.timer3.timeout.connect(self.updateRecordArd)

        self.terminal.setText(self.terminal.text() + "\nConexión exitosa con ArduinoA")

    def connect_arduinoB(self):
        self.serialArduinoB = serial.Serial(port='/dev/ttyACM1', baudrate=57600, bytesize=serial.EIGHTBITS, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, timeout=None)
        #self.serialArduinoB = serial.Serial(port='COM7', baudrate=57600, bytesize=serial.EIGHTBITS, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, timeout=None)
        time.sleep(1)

        self.MA_B_stream.setStyleSheet("background-color : green")
        self.MA_B_record.setStyleSheet("background-color : green")
        self.select_stream.addItem("Arduino B")
        self.stream_s6.setEnabled(True)
        self.stream_s7.setEnabled(True)
        self.stream_s8.setEnabled(True)
        self.stream_s9.setEnabled(True)
        self.stream_s10.setEnabled(True)
        self.record_s6.setEnabled(True)
        self.record_s7.setEnabled(True)
        self.record_s8.setEnabled(True)
        self.record_s9.setEnabled(True)
        self.record_s10.setEnabled(True)
        self.start_stream.setEnabled(True)
        self.start_record.setEnabled(True)

        self.MA_B_stream.setEnabled(False)
        self.MA_B_record.setEnabled(False)

        self.connectedB = True

        if(self.connectedA == False and self.connectedC == False):
                self.timer2 = QtCore.QTimer()
                self.timer2.timeout.connect(self.updateStreamArd)
                self.timer3 = QtCore.QTimer()
                self.timer3.timeout.connect(self.updateRecordArd)

        self.terminal.setText(self.terminal.text() + "\nConexión exitosa con ArduinoB")

    def connect_arduinoC(self):
        self.serialArduinoC = serial.Serial(port='/dev/ttyACM2', baudrate=57600, bytesize=serial.EIGHTBITS, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, timeout=None)
        #self.serialArduinoC = serial.Serial(port='COM7', baudrate=57600, bytesize=serial.EIGHTBITS, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, timeout=None)
        time.sleep(1)

        self.MA_C_stream.setStyleSheet("background-color : green")
        self.MA_C_record.setStyleSheet("background-color : green")
        self.select_stream.addItem("Arduino C")
        self.stream_s11.setEnabled(True)
        self.stream_s12.setEnabled(True)
        self.stream_s13.setEnabled(True)
        self.stream_s14.setEnabled(True)
        self.stream_s15.setEnabled(True)
        self.record_s11.setEnabled(True)
        self.record_s12.setEnabled(True)
        self.record_s13.setEnabled(True)
        self.record_s14.setEnabled(True)
        self.record_s15.setEnabled(True)
        self.start_stream.setEnabled(True)
        self.start_record.setEnabled(True)

        self.MA_C_stream.setEnabled(False)
        self.MA_C_record.setEnabled(False)

        self.connectedC = True

        if(self.connectedA == False and self.connectedB == False):
                self.timer2 = QtCore.QTimer()
                self.timer2.timeout.connect(self.updateStreamArd)

        self.terminal.setText(self.terminal.text() + "\nConexión exitosa con ArduinoC")

    def startStream(self):
        self.start_stream.setEnabled(False)
        self.stop_stream.setEnabled(True)
        self.graphicsView.clear()
        
        self.window_size = int(self.ventanaTemp_stream.value())

        if self.select_stream.currentText() == "Cyton":
                
                filaC = 0
                self.board.config_board('d')
                if self.stream_ch1.isChecked():
                        self.c1 = self.graphicsView.addPlot(row=filaC,col=0)
                        filaC = filaC + 1
                else: 
                        self.board.config_board('1')

                if self.stream_ch2.isChecked():
                        self.c2 = self.graphicsView.addPlot(row=filaC,col=0)
                        filaC = filaC + 1
                else: 
                        self.board.config_board('2')

                if self.stream_ch3.isChecked():
                        self.c3 = self.graphicsView.addPlot(row=filaC,col=0)
                        filaC = filaC + 1
                else: 
                        self.board.config_board('3')

                if self.stream_ch4.isChecked():        
                        self.c4 = self.graphicsView.addPlot(row=filaC,col=0)
                        filaC = filaC + 1
                else: 
                        self.board.config_board('4')

                if self.stream_ch5.isChecked():        
                        self.c5 = self.graphicsView.addPlot(row=filaC,col=0)
                        filaC = filaC + 1
                
                else: 
                        self.board.config_board('5')

                if self.stream_ch6.isChecked():        
                        self.c6 = self.graphicsView.addPlot(row=filaC,col=0)
                        filaC = filaC + 1
                else: 
                        self.board.config_board('6')

                if self.stream_ch7.isChecked():        
                        self.c7 = self.graphicsView.addPlot(row=filaC,col=0)
                        filaC = filaC + 1
                else: 
                        self.board.config_board('7')

                if self.stream_ch8.isChecked():        
                        self.c8 = self.graphicsView.addPlot(row=filaC,col=0)
                        filaC = filaC + 1
                else: 
                        self.board.config_board('8')

                self.board.start_stream(900000)# arranca la cyton

                self.f_s = 250
                self.num_points = self.window_size * self.f_s

                self.stream_ch1.setEnabled(False)
                self.stream_ch2.setEnabled(False)
                self.stream_ch3.setEnabled(False)
                self.stream_ch4.setEnabled(False)
                self.stream_ch5.setEnabled(False)
                self.stream_ch6.setEnabled(False)
                self.stream_ch7.setEnabled(False)
                self.stream_ch8.setEnabled(False)

                self.timer.start(50)

        # if self.select_stream.currentText() == "Cyton + Daisy":
                
        #         filaC = 0
        #         self.boardDaisy.config_board('d')
        #         if self.stream_ch1.isChecked():
        #                 self.c1 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('1')

        #         if self.stream_ch2.isChecked():
        #                 self.c2 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('2')

        #         if self.stream_ch3.isChecked():
        #                 self.c3 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('3')

        #         if self.stream_ch4.isChecked():        
        #                 self.c4 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('4')

        #         if self.stream_ch5.isChecked():        
        #                 self.c5 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('5')

        #         if self.stream_ch6.isChecked():        
        #                 self.c6 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('6')

        #         if self.stream_ch7.isChecked():        
        #                 self.c7 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('7')

        #         if self.stream_ch8.isChecked():        
        #                 self.c8 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('8')

        #         if self.stream_ch9.isChecked():
        #                 self.c9 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('9')

        #         if self.stream_ch10.isChecked():
        #                 self.c10 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('10')

        #         if self.stream_ch11.isChecked():
        #                 self.c11 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('11')

        #         if self.stream_ch12.isChecked():        
        #                 self.c12 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('12')

        #         if self.stream_ch13.isChecked():        
        #                 self.c13 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('13')

        #         if self.stream_ch14.isChecked():        
        #                 self.c14 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('14')

        #         if self.stream_ch15.isChecked():        
        #                 self.c15 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('15')

        #         if self.stream_ch16.isChecked():        
        #                 self.c16 = self.graphicsView.addPlot(row=filaC,col=0)
        #                 filaC = filaC + 1
        #         else: 
        #                 self.boardDaisy.config_board('16')

        #         self.boardDaisy.start_stream(900000)# arranca la cyton

        #         self.f_s = 125
        #         self.num_points = self.window_size * self.f_s

        #         self.stream_ch1.setEnabled(False)
        #         self.stream_ch2.setEnabled(False)
        #         self.stream_ch3.setEnabled(False)
        #         self.stream_ch4.setEnabled(False)
        #         self.stream_ch5.setEnabled(False)
        #         self.stream_ch6.setEnabled(False)
        #         self.stream_ch7.setEnabled(False)
        #         self.stream_ch8.setEnabled(False)
        #         self.stream_ch9.setEnabled(False)
        #         self.stream_ch10.setEnabled(False)
        #         self.stream_ch11.setEnabled(False)
        #         self.stream_ch12.setEnabled(False)
        #         self.stream_ch13.setEnabled(False)
        #         self.stream_ch14.setEnabled(False)
        #         self.stream_ch15.setEnabled(False)
        #         self.stream_ch16.setEnabled(False)

        #         self.timer.start(50)

        if self.select_stream.currentText()=="Arduino A":
                if self.stream_s1.isChecked() or self.stream_s2.isChecked() or self.stream_s3.isChecked() or self.stream_s4.isChecked() or self.stream_s5.isChecked():
                        filaA = 0
                        self.sampling_rateARD1 = 250
                        self.num_pointsARD1 = self.window_size * self.sampling_rateARD1
                        self.valSignalP_ARD = []
                        #para decirle a arduino que debe actuar como esclavo porque se esta stremeando
                        self.serialArduinoA.write(b'd')
                        #para decirle a arduino que la frecuencia es 250Hz
                        self.serialArduinoA.write(b'c')

                        if self.stream_s1.isChecked():
                                self.dataARD1 = []
                                self.currentdataARD1 = []
                                self.serialArduinoA.write(b'a')
                                self.s1 = self.graphicsView.addPlot(row=filaA,col=0)
                                filaA = filaA + 1
                        else:
                                self.serialArduinoA.write(b'b')
                        
                        if self.stream_s2.isChecked():
                                self.dataARD2 = []
                                self.currentdataARD2 = []
                                self.serialArduinoA.write(b'a')
                                self.s2 = self.graphicsView.addPlot(row=filaA,col=0)
                                filaA=filaA+1
                        else:
                                self.serialArduinoA.write(b'b')
                        
                        if self.stream_s3.isChecked():
                                self.dataARD3 = []
                                self.currentdataARD3 = []
                                self.serialArduinoA.write(b'a')
                                self.s3 = self.graphicsView.addPlot(row=filaA,col=0)
                                filaA=filaA+1
                        else:
                                self.serialArduinoA.write(b'b')
                        
                        if self.stream_s4.isChecked():
                                self.dataARD4 = []
                                self.currentdataARD4 = []
                                self.serialArduinoA.write(b'a')
                                self.s4 = self.graphicsView.addPlot(row=filaA,col=0)
                                filaA=filaA+1
                        else:
                                self.serialArduinoA.write(b'b')

                        if self.stream_s5.isChecked():
                                self.dataARD5 = []
                                self.currentdataARD5 = []
                                self.serialArduinoA.write(b'a')
                                self.s4 = self.graphicsView.addPlot(row=filaA,col=0)
                                filaA=filaA+1
                        else:
                                self.serialArduinoA.write(b'b')

                        self.stream_s1.setEnabled(False)
                        self.stream_s2.setEnabled(False)
                        self.stream_s3.setEnabled(False)
                        self.stream_s4.setEnabled(False)
                        self.stream_s5.setEnabled(False)
                        
                        self.serialArduinoA.write(b'e') #arranca arduino
                        self.timer2.start(150)
        
        if self.select_stream.currentText()=="Arduino B":
                if self.stream_s6.isChecked() or self.stream_s7.isChecked() or self.stream_s8.isChecked() or self.stream_s9.isChecked() or self.stream_s10.isChecked():
                        filaB = 0
                        self.sampling_rateARD2 = 250
                        self.num_pointsARD2 = self.window_size * self.sampling_rateARD2
                        self.valSignalP_ARD2 = []
                        #para decirle a arduino que debe actuar como esclavo
                        self.serialArduinoB.write(b'd')
                        #para decirle a arduino que la frecuencia es 250Hz
                        self.serialArduinoB.write(b'c')
                        
                        if self.stream_s6.isChecked():
                                self.dataARD6 = []
                                self.currentdataARD6 = []
                                self.serialArduinoB.write(b'a')
                                self.s6 = self.graphicsView.addPlot(row=filaB,col=0)
                                filaB=filaB+1
                        else:
                                self.serialArduinoB.write(b'b')
                        
                        if self.stream_s7.isChecked():
                                self.dataARD7 = []
                                self.currentdataARD7 = []
                                self.serialArduinoB.write(b'a')
                                self.s7 = self.graphicsView.addPlot(row=filaB,col=0)
                                filaB=filaB+1
                        else:
                                self.serialArduinoB.write(b'b')
                        
                        if self.stream_s8.isChecked():
                                self.dataARD8 = []
                                self.currentdataARD8 = []
                                self.serialArduinoB.write(b'a')
                                self.s8 = self.graphicsView.addPlot(row=filaB,col=0)
                                filaB=filaB+1
                        else:
                                self.serialArduinoB.write(b'b')

                        if self.stream_s9.isChecked():
                                self.dataARD9 = []
                                self.currentdataARD9 = []
                                self.serialArduinoB.write(b'a')
                                self.s9 = self.graphicsView.addPlot(row=filaB,col=0)
                                filaB=filaB+1
                        else:
                                self.serialArduinoB.write(b'b')

                        if self.stream_s10.isChecked():
                                self.dataARD10 = []
                                self.currentdataARD10 = []
                                self.serialArduinoB.write(b'a')
                                self.s10 = self.graphicsView.addPlot(row=filaB,col=0)
                                filaB=filaB+1
                        else:
                                self.serialArduinoB.write(b'b')
                        
                        self.stream_s6.setEnabled(False)
                        self.stream_s7.setEnabled(False)
                        self.stream_s8.setEnabled(False)
                        self.stream_s9.setEnabled(False)
                        self.stream_s10.setEnabled(False)
                        
                        self.serialArduinoB.write(b'e') #arranca arduino

                        self.timer2.start(150)

        if self.select_stream.currentText()=="Arduino C":
                if self.stream_s11.isChecked() or self.stream_s12.isChecked() or self.stream_s13.isChecked() or self.stream_s14.isChecked() or self.stream_s15.isChecked():
                        filaC = 0
                        self.sampling_rateARD3 = 125
                        self.num_pointsARD3 = self.window_size * self.sampling_rateARD3
                        self.valSignalP_ARD3 = []
                        #para decirle a arduino que la frecuencia es 125Hz
                        self.serialArduinoC.write(b'c')
                        
                        if self.stream_s11.isChecked():
                                self.dataARD11 = []
                                self.currentdataARD11 = []
                                self.serialArduinoC.write(b'a')
                                self.s11 = self.graphicsView.addPlot(row=filaC,col=0)
                                filaC=filaC+1
                        else:
                                self.serialArduinoC.write(b'b')
                        
                        if self.stream_s12.isChecked():
                                self.dataARD12 = []
                                self.currentdataARD12 = []
                                self.serialArduinoC.write(b'a')
                                self.s12 = self.graphicsView.addPlot(row=filaC,col=0)
                                filaC=filaC+1
                        else:
                                self.serialArduinoC.write(b'b')
                        
                        if self.stream_s13.isChecked():
                                self.dataARD13 = []
                                self.currentdataARD13 = []
                                self.serialArduinoC.write(b'a')
                                self.s13 = self.graphicsView.addPlot(row=filaC,col=0)
                                filaC=filaC+1
                        else:
                                self.serialArduinoC.write(b'b')

                        if self.stream_s14.isChecked():
                                self.dataARD14 = []
                                self.currentdataARD14 = []
                                self.serialArduinoC.write(b'a')
                                self.s14 = self.graphicsView.addPlot(row=filaC,col=0)
                                filaC=filaC+1
                        else:
                                self.serialArduinoC.write(b'b')

                        if self.stream_s15.isChecked():
                                self.dataARD15 = []
                                self.currentdataARD15 = []
                                self.serialArduinoC.write(b'a')
                                self.s15 = self.graphicsView.addPlot(row=filaC,col=0)
                                filaC=filaC+1
                        else:
                                self.serialArduinoC.write(b'b')
                        
                        self.stream_s11.setEnabled(False)
                        self.stream_s12.setEnabled(False)
                        self.stream_s13.setEnabled(False)
                        self.stream_s14.setEnabled(False)
                        self.stream_s15.setEnabled(False)
                        
                        self.serialArduinoC.write(b'e') #arranca arduino C

                        self.timer2.start(150)

    def stopStream(self):
            self.start_stream.setEnabled(True)
            self.stop_stream.setEnabled(False)

            if self.select_stream.currentText() == "Cyton":
                self.timer.stop()
                self.board.stop_stream()
                self.board.release_session()
                self.connect_cyton()
                self.stream_ch1.setEnabled(True)
                self.stream_ch2.setEnabled(True)
                self.stream_ch3.setEnabled(True)
                self.stream_ch4.setEnabled(True)
                self.stream_ch5.setEnabled(True)
                self.stream_ch6.setEnabled(True)
                self.stream_ch7.setEnabled(True)
                self.stream_ch8.setEnabled(True)

        #     elif self.select_stream.currentText() == "Cyton + Daisy":
        #         self.timer.stop()
        #         self.boardDaisy.stop_stream()
        #         self.stream_ch1.setEnabled(True)
        #         self.stream_ch2.setEnabled(True)
        #         self.stream_ch3.setEnabled(True)
        #         self.stream_ch4.setEnabled(True)
        #         self.stream_ch5.setEnabled(True)
        #         self.stream_ch6.setEnabled(True)
        #         self.stream_ch7.setEnabled(True)
        #         self.stream_ch8.setEnabled(True)
        #         self.stream_ch9.setEnabled(True)
        #         self.stream_ch10.setEnabled(True)
        #         self.stream_ch11.setEnabled(True)
        #         self.stream_ch12.setEnabled(True)
        #         self.stream_ch13.setEnabled(True)
        #         self.stream_ch14.setEnabled(True)
        #         self.stream_ch15.setEnabled(True)
        #         self.stream_ch16.setEnabled(True)

            elif self.select_stream.currentText() == "Arduino A":
                self.timer2.stop()
                self.serialArduinoA.write(b'r')
                self.stream_s1.setEnabled(True)
                self.stream_s2.setEnabled(True)
                self.stream_s3.setEnabled(True)
                self.stream_s4.setEnabled(True)
                self.stream_s5.setEnabled(True)
            elif self.select_stream.currentText() == "Arduino B":
                self.timer2.stop()
                self.serialArduinoB.write(b'r')
                self.stream_s6.setEnabled(True)
                self.stream_s7.setEnabled(True)
                self.stream_s8.setEnabled(True)
                self.stream_s9.setEnabled(True)
                self.stream_s10.setEnabled(True)
            elif self.select_stream.currentText() == "Arduino C":
                self.timer2.stop()
                self.serialArduinoC.write(b'r')
                self.stream_s11.setEnabled(True)
                self.stream_s12.setEnabled(True)
                self.stream_s13.setEnabled(True)
                self.stream_s14.setEnabled(True)
                self.stream_s15.setEnabled(True)            
            #self.terminal.setText("Stop Stream")
            print("Stop Stream")  

    def updateStreamCy(self):
        
        if self.select_stream.currentText() == "Cyton":
                currentdata = self.board.get_current_board_data(self.num_points + 50)
        # elif self.select_stream.currentText() == "Cyton + Daisy":
        #         currentdata = self.boardDaisy.get_current_board_data(self.num_points)
        
        if self.stream_ch1.isChecked():
                self.c1.clear()
                currentdataC1 = currentdata[1]
                if(self.notch_stream.isChecked()):
                        DataFilter.remove_environmental_noise(currentdataC1,self.f_s, NoiseTypes.FIFTY.value)
                if(self.pb1_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC1, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb2_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC1, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb3_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC1, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb4_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC1, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb5_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC1, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
                if len(currentdataC1) < 250:
                        self.c1.plot(currentdataC1)
                else:
                        self.c1.plot(currentdataC1[250:])
        if self.stream_ch2.isChecked():
                self.c2.clear()
                currentdataC2 = currentdata[2]
                if(self.notch_stream.isChecked()):
                        DataFilter.remove_environmental_noise(currentdataC2,self.f_s, NoiseTypes.FIFTY.value)
                if(self.pb1_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC2, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb2_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC2, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb3_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC2, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb4_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC2, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb5_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC2, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
                if len(currentdataC2) < 250:
                        self.c2.plot(currentdataC2)
                else:
                        self.c2.plot(currentdataC2[250:])
        if self.stream_ch3.isChecked():
                self.c3.clear()
                currentdataC3 = currentdata[3]
                if(self.notch_stream.isChecked()):
                        DataFilter.remove_environmental_noise(currentdataC3,self.f_s, NoiseTypes.FIFTY.value)
                if(self.pb1_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC3, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb2_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC3, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb3_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC3, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb4_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC3, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb5_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC3, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
                if len(currentdataC3) < 250:
                        self.c3.plot(currentdataC3)
                else:
                        self.c3.plot(currentdataC3[250:])
        if self.stream_ch4.isChecked():
                self.c4.clear()
                currentdataC4 = currentdata[4]
                if(self.notch_stream.isChecked()):
                        DataFilter.remove_environmental_noise(currentdataC4,self.f_s, NoiseTypes.FIFTY.value)
                if(self.pb1_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC4, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb2_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC4, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb3_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC4, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb4_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC4, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb5_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC4, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
                if len(currentdataC4) < 250:
                        self.c4.plot(currentdataC4)
                else:
                        self.c4.plot(currentdataC4[250:])
        if self.stream_ch5.isChecked():
                self.c5.clear()
                currentdataC5 = currentdata[5]
                if(self.notch_stream.isChecked()):
                        DataFilter.remove_environmental_noise(currentdataC5,self.f_s, NoiseTypes.FIFTY.value)
                if(self.pb1_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC5, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb2_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC5, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb3_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC5, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb4_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC5, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb5_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC5, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
                if len(currentdataC5) < 250:
                        self.c5.plot(currentdataC5)
                else:
                        self.c5.plot(currentdataC5[250:])
        if self.stream_ch6.isChecked():
                self.c6.clear()
                currentdataC6 = currentdata[6]
                if(self.notch_stream.isChecked()):
                        DataFilter.remove_environmental_noise(currentdataC6,self.f_s, NoiseTypes.FIFTY.value)
                if(self.pb1_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC6, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb2_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC6, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb3_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC6, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb4_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC6, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb5_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC6, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
                if len(currentdataC6) < 250:
                        self.c6.plot(currentdataC6)
                else:
                        self.c6.plot(currentdataC6[250:])
        if self.stream_ch7.isChecked():
                self.c7.clear()
                currentdataC7 = currentdata[7]
                if(self.notch_stream.isChecked()):
                        DataFilter.remove_environmental_noise(currentdataC7,self.f_s, NoiseTypes.FIFTY.value)
                if(self.pb1_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC7, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb2_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC7, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb3_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC7, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb4_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC7, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb5_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC7, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
                if len(currentdataC7) < 250:
                        self.c7.plot(currentdataC7)
                else:
                        self.c7.plot(currentdataC7[250:])
        if self.stream_ch8.isChecked():
                self.c8.clear()
                currentdataC8 = currentdata[8]
                if(self.notch_stream.isChecked()):
                        DataFilter.remove_environmental_noise(currentdataC8,self.f_s, NoiseTypes.FIFTY.value)
                if(self.pb1_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC8, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb2_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC8, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb3_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC8, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb4_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC8, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
                if(self.pb5_stream.isChecked()):
                        DataFilter.perform_bandpass(currentdataC8, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
                if len(currentdataC8) < 250:
                        self.c8.plot(currentdataC8)
                else:
                        self.c8.plot(currentdataC8[250:])
        # if self.select_stream.currentText() == "Cyton + Daisy":
        #         if self.stream_ch9.isChecked():
        #                 self.c9.clear()
        #                 currentdataC9 = currentdata[9]
        #                 if(self.notch_stream.isChecked()):
        #                         DataFilter.remove_environmental_noise(currentdataC9,self.f_s, NoiseTypes.FIFTY.value)
        #                 if(self.pb1_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC9, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb2_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC9, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb3_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC9, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb4_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC9, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb5_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC9, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 self.c9.plot(currentdataC9)
        #         if self.stream_ch10.isChecked():
        #                 self.C10.clear()
        #                 currentdataC10 = currentdata[9]
        #                 if(self.notch_stream.isChecked()):
        #                         DataFilter.remove_environmental_noise(currentdataC10,self.f_s, NoiseTypes.FIFTY.value)
        #                 if(self.pb1_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC10, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb2_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC10, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb3_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC10, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb4_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC10, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb5_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC10, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 self.c10.plot(currentdataC10)
        #         if self.stream_ch11.isChecked():
        #                 self.C11.clear()
        #                 currentdataC11 = currentdata[9]
        #                 if(self.notch_stream.isChecked()):
        #                         DataFilter.remove_environmental_noise(currentdataC11,self.f_s, NoiseTypes.FIFTY.value)
        #                 if(self.pb1_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC11, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb2_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC11, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb3_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC11, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb4_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC11, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb5_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC11, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 self.c11.plot(currentdataC11)
        #         if self.stream_ch12.isChecked():
        #                 self.C12.clear()
        #                 currentdataC12 = currentdata[9]
        #                 if(self.notch_stream.isChecked()):
        #                         DataFilter.remove_environmental_noise(currentdataC12,self.f_s, NoiseTypes.FIFTY.value)
        #                 if(self.pb1_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC12, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb2_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC12, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb3_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC12, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb4_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC12, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb5_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC12, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 self.c12.plot(currentdataC12)
        #         if self.stream_ch13.isChecked():
        #                 self.C13.clear()
        #                 currentdataC13 = currentdata[9]
        #                 if(self.notch_stream.isChecked()):
        #                         DataFilter.remove_environmental_noise(currentdataC13,self.f_s, NoiseTypes.FIFTY.value)
        #                 if(self.pb1_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC13, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb2_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC13, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb3_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC13, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb4_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC13, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb5_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC13, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 self.c13.plot(currentdataC13)
        #         if self.stream_ch14.isChecked():
        #                 self.C14.clear()
        #                 currentdataC14 = currentdata[9]
        #                 if(self.notch_stream.isChecked()):
        #                         DataFilter.remove_environmental_noise(currentdataC14,self.f_s, NoiseTypes.FIFTY.value)
        #                 if(self.pb1_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC14, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb2_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC14, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb3_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC14, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb4_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC14, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb5_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC14, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 self.c14.plot(currentdataC14)
        #         if self.stream_ch15.isChecked():
        #                 self.C15.clear()
        #                 currentdataC15 = currentdata[9]
        #                 if(self.notch_stream.isChecked()):
        #                         DataFilter.remove_environmental_noise(currentdataC15,self.f_s, NoiseTypes.FIFTY.value)
        #                 if(self.pb1_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC15, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb2_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC15, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb3_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC15, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb4_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC15, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb5_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC15, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 self.c15.plot(currentdataC15)
        #         if self.stream_ch16.isChecked():
        #                 self.C16.clear()
        #                 currentdataC16 = currentdata[9]
        #                 if(self.notch_stream.isChecked()):
        #                         DataFilter.remove_environmental_noise(currentdataC16,self.f_s, NoiseTypes.FIFTY.value)
        #                 if(self.pb1_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC16, self.f_s, 25.5, 49, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb2_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC16, self.f_s, 27.5, 45, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb3_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC16, self.f_s, 32.5, 35, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb4_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC16, self.f_s, 10, 6, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 if(self.pb5_stream.isChecked()):
        #                         DataFilter.perform_bandpass(currentdataC16, self.f_s, 50.5, 99, 2, FilterTypes.BUTTERWORTH.value, 0)
        #                 self.c16.plot(currentdataC16)

    def updateStreamArd(self):
        self.valSignalP_ARD = []
        if(self.select_stream.currentText()=="Arduino A"):
                self.serialArduinoA.write(b's')
                cantSignal = self.serialArduinoA.read(size=2)
                cant_buffer = cantSignal[0] * 256 + cantSignal[1]
                if(cant_buffer == 101):
                        valSignal = self.serialArduinoA.read(size=502)
                if(cant_buffer == 102):
                        valSignal = self.serialArduinoA.read(size=1004)
                if(cant_buffer == 103):
                        valSignal = self.serialArduinoA.read(size=1506)
                if(cant_buffer == 104):
                        valSignal = self.serialArduinoA.read(size=2008)
                if(cant_buffer == 105):
                        valSignal = self.serialArduinoA.read(size=2510)
        elif(self.select_stream.currentText()=="Arduino B"):
                self.serialArduinoB.write(b's')
                cantSignal = self.serialArduinoB.read(size=2)
                cant_buffer = cantSignal[0] * 256 + cantSignal[1]
                if(cant_buffer == 101):
                        valSignal = self.serialArduinoB.read(size=502)
                if(cant_buffer == 102):
                        valSignal = self.serialArduinoB.read(size=1004)
                if(cant_buffer == 103):
                        valSignal = self.serialArduinoB.read(size=1506)
                if(cant_buffer == 104):
                        valSignal = self.serialArduinoB.read(size=2008)
                if(cant_buffer == 105):
                        valSignal = self.serialArduinoB.read(size=2510)
        elif(self.select_stream.currentText()=="Arduino C"):
                self.serialArduinoC.write(b's')
                cant_buffer = self.serialArduinoC.read(size=1)
                #cant_buffer = cantSignal[0] * 256 + cantSignal[1]
                if(cant_buffer == 1):
                        valSignal = self.serialArduinoB.read(size=502)
                if(cant_buffer == 2):
                        valSignal = self.serialArduinoB.read(size=1004)
                if(cant_buffer == 3):
                        valSignal = self.serialArduinoB.read(size=1506)
                if(cant_buffer == 4):
                        valSignal = self.serialArduinoB.read(size=2008)
                if(cant_buffer == 5):
                        valSignal = self.serialArduinoB.read(size=2510)

        if (cant_buffer!=100):
            for i in range(0, len(valSignal) - 1, 2):
                    val2 = ord(valSignal[i:i+1])
                    val3 = ord(valSignal[i+1:i+2])
                    val4 = val2*256+val3
                    self.valSignalP_ARD.append(val4)
                    #val5 = (val4 * 5)/1024 # Paso el valor a volts
                    
        for j in range(0, len(self.valSignalP_ARD) - 1, 251):
                header = self.valSignalP_ARD[j]
                current_values = self.valSignalP_ARD[j+1:j+251]
                if(self.stream_s1.isChecked() and header == 1):
                        self.s1.clear()
                        self.dataARD1 = self.dataARD1 + current_values
                        if len(self.dataARD1) < self.num_pointsARD1:
                                self.currentdataARD1 = self.dataARD1
                        else:    
                                self.currentdataARD1 = self.dataARD1[len(self.dataARD1)-self.num_pointsARD1:len(self.dataARD1)]
                        self.s1.plot(self.currentdataARD1)
                elif(self.stream_s2.isChecked() and header == 2):
                        self.s2.clear()
                        self.dataARD2 = self.dataARD2 + current_values
                        if len(self.dataARD2) < self.num_pointsARD1:
                                self.currentdataARD2 = self.dataARD2
                        else:    
                                self.currentdataARD2 = self.dataARD2[len(self.dataARD2)-self.num_pointsARD1:len(self.dataARD2)]
                        self.s2.plot(self.currentdataARD2)
                elif(self.stream_s3.isChecked() and header == 3):
                        self.s3.clear()
                        self.dataARD3 = self.dataARD3 + current_values
                        if len(self.dataARD3) < self.num_pointsARD1:
                                self.currentdataARD3 = self.dataARD3
                        else:    
                                self.currentdataARD3 = self.dataARD3[len(self.dataARD3)-self.num_pointsARD1:len(self.dataARD3)]
                        self.s3.plot(self.currentdataARD3)
                elif(self.stream_s4.isChecked() and header == 4):
                        self.s4.clear()
                        self.dataARD4 = self.dataARD4 + current_values
                        if len(self.dataARD4) < self.num_pointsARD1:
                                self.currentdataARD4 = self.dataARD4
                        else:    
                                self.currentdataARD4 = self.dataARD4[len(self.dataARD4)-self.num_pointsARD1:len(self.dataARD4)]
                        self.s4.plot(self.currentdataARD4)
                elif(self.stream_s5.isChecked() and header == 5):
                        self.s5.clear()
                        self.dataARD5 = self.dataARD5 + current_values
                        if len(self.dataARD5) < self.num_pointsARD1:
                                self.currentdataARD5 = self.dataARD5
                        else:    
                                self.currentdataARD5 = self.dataARD5[len(self.dataARD5)-self.num_pointsARD1:len(self.dataARD5)]
                        self.s5.plot(self.currentdataARD5)
                elif(self.stream_s6.isChecked() and header == 6):
                        self.s6.clear()
                        self.dataARD6 = self.dataARD6 + current_values
                        if len(self.dataARD6) < self.num_pointsARD2:
                                self.currentdataARD6 = self.dataARD6
                        else:    
                                self.currentdataARD6 = self.dataARD6[len(self.dataARD6)-self.num_pointsARD2:len(self.dataARD6)]
                        self.s6.plot(self.currentdataARD6)
                elif(self.stream_s7.isChecked() and header == 7):
                        self.s7.clear()
                        self.dataARD7 = self.dataARD7 + current_values
                        if len(self.dataARD7) < self.num_pointsARD2:
                                self.currentdataARD7 = self.dataARD7
                        else:    
                                self.currentdataARD7 = self.dataARD7[len(self.dataARD7)-self.num_pointsARD2:len(self.dataARD7)]
                        self.s7.plot(self.currentdataARD7)
                elif(self.stream_s8.isChecked() and header == 8):
                        self.s8.clear()
                        self.dataARD8 = self.dataARD8 + current_values
                        if len(self.dataARD8) < self.num_pointsARD2:
                                self.currentdataARD8 = self.dataARD8
                        else:    
                                self.currentdataARD8 = self.dataARD8[len(self.dataARD8)-self.num_pointsARD2:len(self.dataARD8)]
                        self.s8.plot(self.currentdataARD8)
                elif(self.stream_s9.isChecked() and header == 9):
                        self.s9.clear()
                        self.dataARD9 = self.dataARD9 + current_values
                        if len(self.dataARD9) < self.num_pointsARD2:
                                self.currentdataARD9 = self.dataARD9
                        else:    
                                self.currentdataARD9 = self.dataARD9[len(self.dataARD9)-self.num_pointsARD2:len(self.dataARD9)]
                        self.s9.plot(self.currentdataARD9)
                elif(self.stream_s10.isChecked() and header == 10):
                        self.s10.clear()
                        self.dataARD10 = self.dataARD10 + current_values
                        if len(self.dataARD10) < self.num_pointsARD2:
                                self.currentdataARD10 = self.dataARD10
                        else:    
                                self.currentdataARD10 = self.dataARD10[len(self.dataARD10)-self.num_pointsARD2:len(self.dataARD10)]
                        self.s10.plot(self.currentdataARD10)
                elif(self.stream_s11.isChecked() and header == 11):
                        self.s11.clear()
                        self.dataARD11 = self.dataARD11 + current_values
                        if len(self.dataARD11) < self.num_pointsARD3:
                                self.currentdataARD11 = self.dataARD11
                        else:    
                                self.currentdataARD11 = self.dataARD11[len(self.dataARD11)-self.num_pointsARD3:len(self.dataARD11)]
                        self.s11.plot(self.currentdataARD11)
                elif(self.stream_s12.isChecked() and header == 12):
                        self.s12.clear()
                        self.dataARD12 = self.dataARD12 + current_values
                        if len(self.dataARD12) < self.num_pointsARD3:
                                self.currentdataARD12 = self.dataARD12
                        else:    
                                self.currentdataARD12 = self.dataARD12[len(self.dataARD12)-self.num_pointsARD3:len(self.dataARD12)]
                        self.s12.plot(self.currentdataARD12)
                elif(self.stream_s13.isChecked() and header == 13):
                        self.s13.clear()
                        self.dataARD13 = self.dataARD13 + current_values
                        if len(self.dataARD13) < self.num_pointsARD3:
                                self.currentdataARD13 = self.dataARD13
                        else:    
                                self.currentdataARD13 = self.dataARD13[len(self.dataARD13)-self.num_pointsARD3:len(self.dataARD13)]
                        self.s13.plot(self.currentdataARD13)
                elif(self.stream_s14.isChecked() and header == 14):
                        self.s14.clear()
                        self.dataARD14 = self.dataARD14 + current_values
                        if len(self.dataARD14) < self.num_pointsARD3:
                                self.currentdataARD14 = self.dataARD14
                        else:    
                                self.currentdataARD14 = self.dataARD14[len(self.dataARD14)-self.num_pointsARD3:len(self.dataARD14)]
                        self.s14.plot(self.currentdataARD14)
                elif(self.stream_s15.isChecked() and header == 15):
                        self.s15.clear()
                        self.dataARD15 = self.dataARD15 + current_values
                        if len(self.dataARD15) < self.num_pointsARD3:
                                self.currentdataARD15 = self.dataARD15
                        else:    
                                self.currentdataARD15 = self.dataARD15[len(self.dataARD15)-self.num_pointsARD3:len(self.dataARD15)]
                        self.s15.plot(self.currentdataARD15)

    def startRecord(self):
        print("Arranca startRecord")
        print(time.time())
        if(self.contador == 0):
                duracionHora = int(self.durac_horas.value())
                duracionMinutos = int(self.durac_min.value())
                if(duracionHora == 0 and duracionMinutos == 0):
                        print("Debe seleccionar una duracion")
                        return None
                if(self.connectedA == True):
                        self.currentTime = 0
                        self.timeout = duracionMinutos + 60 * duracionHora
                        #self.timeReset = time.time() + 45 # Aca se debe decidir cada cuanto se resetea la toma de datos (30 segundos)
                        self.timeReset = 9 # Aca se debe decidir cada cuanto se resetea la toma de datos (1 hora)
                if(self.connectedA == False and self.connectedB == True):
                        self.currentTime = 0
                        self.timeout = duracionMinutos + 60 * duracionHora
                        #self.timeReset = time.time() + 45 # Aca se debe decidir cada cuanto se resetea la toma de datos (30 segundos)
                        self.timeReset = 9 # Aca se debe decidir cada cuanto se resetea la toma de datos (1 hora)
                if(self.connectedA == False and self.connectedB == False and (self.connectedCy == True)):
                        self.timeout = time.time() + 60*duracionMinutos + 60*60*duracionHora
                        self.timeReset = time.time() + 60*9 # Aca se debe decidir cada cuanto se resetea la toma de datos (1 hora)
        
        self.stop_record.setEnabled(True)
        self.start_record.setEnabled(False)

        #me fijo que comunicaciones se establecieron
        if(self.connectedA == True):
                self.valSignalPA = []

                #envio una "c" para indicarle a arduino A que es el master
                self.serialArduinoA.write(b'c')
                #time.sleep(0.5)

                #envio una "c" para indicarle a arduino que la frec de muestreo es 250 Hz
                self.serialArduinoA.write(b'c')
                #time.sleep(0.5)

                #me fijo que señales se desean
                if(self.record_s1.isChecked()):     
                        self.bufferSI = []
                        self.serialArduinoA.write(b'a')
                else:
                        self.serialArduinoA.write(b'b')
                
                if(self.record_s2.isChecked()):     
                        self.bufferSII = []
                        self.serialArduinoA.write(b'a')
                else:
                        self.serialArduinoA.write(b'b')
                
                if(self.record_s3.isChecked()):   
                        self.bufferSIII = []
                        self.serialArduinoA.write(b'a')
                else:
                        self.serialArduinoA.write(b'b')

                if(self.record_s4.isChecked()):
                        self.bufferSIV = []
                        self.serialArduinoA.write(b'a')
                else:
                         self.serialArduinoA.write(b'b')

                if(self.record_s5.isChecked()):
                        self.bufferSV = []
                        self.serialArduinoA.write(b'a')
                else:
                         self.serialArduinoA.write(b'b')
                
                self.record_s1.setEnabled(False)
                self.record_s2.setEnabled(False)
                self.record_s3.setEnabled(False)
                self.record_s4.setEnabled(False)
                self.record_s5.setEnabled(False)
        
        if(self.connectedB==True):
                self.valSignalPB = []

                if(self.connectedA==False):
                        self.serialArduinoB.write(b'c')
                else:
                        self.serialArduinoB.write(b'd')

                #envio una "c" para indicarle a arduino que la frec de muestreo es 250 Hz
                self.serialArduinoB.write(b'c')

                #me fijo que señales se desean                
                if(self.record_s6.isChecked()):     
                        self.bufferSVI = []
                        self.serialArduinoB.write(b'a')
                else:
                        self.serialArduinoB.write(b'b')
                
                if(self.record_s7.isChecked()):   
                        self.bufferSVII = []
                        self.serialArduinoB.write(b'a')
                else:
                        self.serialArduinoB.write(b'b')

                if(self.record_s8.isChecked()):
                        self.bufferSVIII = []
                        self.serialArduinoB.write(b'a')
                else:
                         self.serialArduinoB.write(b'b')

                if(self.record_s9.isChecked()):
                        self.bufferSIX = []
                        self.serialArduinoB.write(b'a')
                else:
                         self.serialArduinoB.write(b'b')

                if(self.record_s10.isChecked()):
                        self.bufferSX = []
                        self.serialArduinoB.write(b'a')
                else:
                         self.serialArduinoB.write(b'b')
                
                self.record_s6.setEnabled(False)
                self.record_s7.setEnabled(False)
                self.record_s8.setEnabled(False)
                self.record_s9.setEnabled(False)
                self.record_s10.setEnabled(False)

        if(self.connectedC==True and self.contador==0):
                self.valSignalPC = []

                #envio una "c" para indicarle a arduino que la frec de muestreo es 125 Hz
                self.serialArduinoC.write(b'c')

                #me fijo que señales se desean                
                if(self.record_s11.isChecked()):     
                        self.bufferSXI = []
                        self.serialArduinoC.write(b'a')
                else:
                        self.serialArduinoC.write(b'b')
                
                if(self.record_s12.isChecked()):     
                        self.bufferSXII = []
                        self.serialArduinoC.write(b'a')
                else:
                        self.serialArduinoC.write(b'b')

                if(self.record_s13.isChecked()):     
                        self.bufferSXIII = []
                        self.serialArduinoC.write(b'a')
                else:
                        self.serialArduinoC.write(b'b')

                if(self.record_s14.isChecked()):     
                        self.bufferSXIV = []
                        self.serialArduinoC.write(b'a')
                else:
                        self.serialArduinoC.write(b'b')

                if(self.record_s15.isChecked()):     
                        self.bufferSXV = []
                        self.serialArduinoC.write(b'a')
                else:
                        self.serialArduinoC.write(b'b')
                
                self.record_s11.setEnabled(False)
                self.record_s12.setEnabled(False)
                self.record_s13.setEnabled(False)
                self.record_s14.setEnabled(False)
                self.record_s15.setEnabled(False)
                
        if(self.connectedC==True and self.contador != 0 ):
                self.serialArduinoC.write(b'e')

        if(self.connectedCy==True and self.contador == 0):   
                self.bufferCyton = np.ndarray(shape=(24,0), dtype= np.float64)

                #me fijo que señales se desean
                self.board.config_board('d')

                if(self.record_ch1.isChecked() == False):     
                        self.board.config_board('1')

                if(self.record_ch2.isChecked() == False):     
                        self.board.config_board('2')
                
                if(self.record_ch3.isChecked() == False):     
                        self.board.config_board('3')
                
                if(self.record_ch4.isChecked() == False):     
                        self.board.config_board('4')

                if(self.record_ch5.isChecked() == False):     
                        self.board.config_board('5')

                if(self.record_ch6.isChecked() == False):     
                        self.board.config_board('6')
                
                if(self.record_ch7.isChecked() == False):     
                        self.board.config_board('7')

                if(self.record_ch8.isChecked() == False):     
                        self.board.config_board('8')
                
                self.record_ch1.setEnabled(False)
                self.record_ch2.setEnabled(False)
                self.record_ch3.setEnabled(False)
                self.record_ch4.setEnabled(False)
                self.record_ch5.setEnabled(False)
                self.record_ch6.setEnabled(False)
                self.record_ch7.setEnabled(False)
                self.record_ch8.setEnabled(False)

        # if(self.connectedCD==True and self.contador == 0):                
        #         self.bufferCD = np.ndarray(shape=(32,0), dtype= np.float64)

        #         #me fijo que señales se desean
        #         self.boardDaisy.config_board('d')

        #         if(self.record_ch1.isChecked() == False):     
        #                 self.boardDaisy.config_board('1')
                
        #         if(self.record_ch2.isChecked() == False):     
        #                 self.boardDaisy.config_board('2')
                
        #         if(self.record_ch3.isChecked() == False):     
        #                 self.boardDaisy.config_board('3')
                
        #         if(self.record_ch4.isChecked() == False):     
        #                 self.boardDaisy.config_board('4')

        #         if(self.record_ch5.isChecked() == False):     
        #                 self.boardDaisy.config_board('5')

        #         if(self.record_ch6.isChecked() == False):     
        #                 self.boardDaisy.config_board('6')
                
        #         if(self.record_ch7.isChecked() == False):     
        #                 self.boardDaisy.config_board('7')

        #         if(self.record_ch8.isChecked() == False):     
        #                 self.boardDaisy.config_board('8')
                
        #         if(self.record_ch9.isChecked() == False):   
        #                 self.boardDaisy.config_board('xQ160110X')
                
        #         if(self.record_ch10.isChecked() == False):     
        #                 self.boardDaisy.config_board('xW160110X')
                
        #         if(self.record_ch11.isChecked() == False):     
        #                 self.boardDaisy.config_board('xE160110X')
                
        #         if(self.record_ch12.isChecked() == False):     
        #                 self.boardDaisy.config_board('xR160110X')

        #         if(self.record_ch13.isChecked() == False):     
        #                 self.boardDaisy.config_board('xT160110X')

        #         if(self.record_ch14.isChecked() == False):     
        #                 self.boardDaisy.config_board('xY160110X')
                
        #         if(self.record_ch15.isChecked() == False):     
        #                 self.boardDaisy.config_board('xU160110X')

        #         if(self.record_ch16.isChecked() == False):     
        #                 self.boardDaisy.config_board('xI160110X')
        
        #         self.record_ch1.setEnabled(False)
        #         self.record_ch2.setEnabled(False)
        #         self.record_ch3.setEnabled(False)
        #         self.record_ch4.setEnabled(False)
        #         self.record_ch5.setEnabled(False)
        #         self.record_ch6.setEnabled(False)
        #         self.record_ch7.setEnabled(False)
        #         self.record_ch8.setEnabled(False)
        #         self.record_ch9.setEnabled(False)
        #         self.record_ch10.setEnabled(False)
        #         self.record_ch11.setEnabled(False)
        #         self.record_ch12.setEnabled(False)
        #         self.record_ch13.setEnabled(False)
        #         self.record_ch14.setEnabled(False)
        #         self.record_ch15.setEnabled(False)
        #         self.record_ch16.setEnabled(False)

        if(self.contador == 0):
                self.terminal.setText(self.terminal.text() + "\nSe comienza a grabar")

        if(self.connectedCy==True):
                self.board.start_stream(40000)# arranca la cyton

        #if(self.connectedCD==True):
        #        self.boardDaisy.start_stream(40000)# arranca la cyton+ Daisy
        
        if(self.connectedC==True):
                #Al enviar el caracter e, se inicializa el timer
                self.serialArduinoC.write(b'e') #arranca arduino

        if(self.connectedA==True):
                #Al enviar el caracter e, se inicializa el timer y comienza la lectura en los ADC
                self.serialArduinoA.write(b'e') #arranca arduino
                  
        if(self.connectedB==True):
                #Al enviar el caracter e, se inicializa el timer y comienza la lectura en los ADC
                self.serialArduinoB.write(b'e') #arranca arduino

        if(self.connectedA==True or self.connectedB==True):
                self.timer3.start(50)

        if(self.connectedA == False and self.connectedB == False):
                self.timerSR.start(1000)
        print("Cortamos el startrecord")
        print(time.time())

    def stopRecord(self):

        if(self.connectedA == True or self.connectedB==True):
                self.timer3.stop()
        if(self.connectedA == False and self.connectedB == False):
                self.timerSR.stop()
        if(self.connectedA == True):
                self.serialArduinoA.write(b'r')
                self.record_s1.setEnabled(True)
                self.record_s2.setEnabled(True)
                self.record_s3.setEnabled(True)
                self.record_s4.setEnabled(True)
                self.record_s5.setEnabled(True)
        if(self.connectedB == True):
                self.serialArduinoB.write(b'r')
                self.record_s6.setEnabled(True)
                self.record_s7.setEnabled(True)
                self.record_s8.setEnabled(True)
                self.record_s9.setEnabled(True)
                self.record_s10.setEnabled(True)
        if(self.connectedC == True):
                self.serialArduinoC.write(b'r')
                self.record_s11.setEnabled(True)
                self.record_s12.setEnabled(True)
                self.record_s13.setEnabled(True)
                self.record_s14.setEnabled(True)
                self.record_s15.setEnabled(True)
        if(self.connectedCy == True):
                self.board.stop_stream() #para la cyton
                self.record_ch1.setEnabled(True)
                self.record_ch2.setEnabled(True)
                self.record_ch3.setEnabled(True)
                self.record_ch4.setEnabled(True)
                self.record_ch5.setEnabled(True)
                self.record_ch6.setEnabled(True)
                self.record_ch7.setEnabled(True)
                self.record_ch8.setEnabled(True)
        # if(self.connectedCD == True):
        #         self.boardDaisy.stop_stream()# para la cyton + Daisy  
        #         self.record_ch1.setEnabled(True)
        #         self.record_ch2.setEnabled(True)
        #         self.record_ch3.setEnabled(True)
        #         self.record_ch4.setEnabled(True)
        #         self.record_ch5.setEnabled(True)
        #         self.record_ch6.setEnabled(True)
        #         self.record_ch7.setEnabled(True)
        #         self.record_ch8.setEnabled(True)
        #         self.record_ch9.setEnabled(True)
        #         self.record_ch10.setEnabled(True)
        #         self.record_ch11.setEnabled(True)
        #         self.record_ch12.setEnabled(True)
        #         self.record_ch13.setEnabled(True)
        #         self.record_ch14.setEnabled(True)
        #         self.record_ch15.setEnabled(True)
        #         self.record_ch16.setEnabled(True)
        
        self.stop_record.setEnabled(False)
        self.start_record.setEnabled(True)

        data = {'Nombre': [self.nombre_paciente.text()], 'Apellido': [self.apellido.text()], 'DNI':[self.dni.text()],'Fecha Nacimiento':[self.fecha_nac.text()],'Fecha Estudio':[self.fecha_estudio.text()]}  
        metaData = pd.DataFrame(data)  
        metaData.to_csv('metaData.csv',index=False)

        self.saveData()

        self.terminal.setText(self.terminal.text() + "\nstop")

    def resetRecord(self):
        print("arranca reset")
        print(time.time())
        if(self.connectedA == True or self.connectedB == True):
                self.timer3.stop()
        if(self.connectedA == False and self.connectedB == False):
                self.timerSR.stop()
        if(self.connectedA == True):
                self.serialArduinoA.write(b'r')
        if(self.connectedB == True):
                self.serialArduinoB.write(b'r')
        if(self.connectedCy == True):
                self.board.stop_stream() #para la cyton
        #if(self.connectedCD == True):
        #        self.boardDaisy.stop_stream()# para la cyton + Daisy
        if(self.connectedC == True):
                self.serialArduinoC.write(b'r')

        print("Termina resetrecord")
        print(time.time())
        self.timeReset = self.timeReset + 9
        self.saveData()
        self.startRecord()

    def syncro(self, data):
        if (self.connectedCy == True):
                #data = self.board.get_board_data()
                datatrunc = np.ndarray(shape=(24,0), dtype= np.float64)
                dataext = np.ndarray(shape=(24,0), dtype= np.float64)
                cantidad = 15000 #Sale de hacer 250*60
        #if (self.connectedCD == True):
                #data = self.board.get_boardDaisy_data()
        #        datatrunc = np.ndarray(shape=(32,0), dtype= np.float64)
        #        dataext = np.ndarray(shape=(32,0), dtype= np.float64)
        #        cantidad = 7500 #Sale de hacer 125*60
                
        tamano = np.shape(data)[1]
        print(tamano)
        if(tamano > cantidad):
                diferencia = tamano - cantidad
                lapso = tamano//diferencia
                inicio = 1
                fin = lapso
                for j in range(1,diferencia+1):
                        datatrunc = np.hstack((datatrunc,data[:,inicio:fin]))
                        inicio = lapso * j + j
                        fin = inicio + lapso
                print(np.shape(datatrunc))
                self.bufferCyton = np.hstack((self.bufferCyton, datatrunc))
                
        if(tamano == cantidad):
                self.bufferCyton = np.hstack((self.bufferCyton, data))
                
        if(tamano < cantidad):
                diferencia = cantidad - tamano
                lapso = tamano//diferencia
                inicio = 0
                fin = lapso
                for j in range(1,diferencia+1):
                        dataext = np.hstack((dataext,data[:,inicio:fin+1]))
                        dataext = np.hstack((dataext,data[:,fin+1:fin+2]))
                        inicio = lapso * j + j
                        fin = inicio + lapso + 1
                print(np.shape(dataext))
                self.bufferCyton = np.hstack((self.bufferCyton, dataext))

        self.currentTime = self.currentTime + 1
        #print(self.currentTime)
        self.terminal.setText("Tiempo transcurrido desde el inicio del estudio:" + str(self.currentTime) + "min")

    def datosArdA(self, cant_buffer):
        if(cant_buffer == 101):
                valSignal = self.serialArduinoA.read(size=502)
        if(cant_buffer == 102):
                valSignal = self.serialArduinoA.read(size=1004)
        if(cant_buffer == 103):
                valSignal = self.serialArduinoA.read(size=1506)
        if(cant_buffer == 104):
                valSignal = self.serialArduinoA.read(size=2008)
        if(cant_buffer == 105):
                valSignal = self.serialArduinoA.read(size=2510)

        for i in range(0, len(valSignal) - 1, 2):
                val2 = ord(valSignal[i:i+1])
                val3 = ord(valSignal[i+1:i+2])
                val4 = val2*256+val3
                self.valSignalPA.append(val4)

        for j in range(0, len(self.valSignalPA) - 1, 251):
                header = self.valSignalPA[j]
                current_values = self.valSignalPA[j+1:j+251]
                if(header == 1):
                        self.bufferSI = self.bufferSI + current_values
                        if (self.record_s1.isChecked==False):
                                print('error de lectura') 
                elif(header == 2):
                        self.bufferSII = self.bufferSII + current_values
                        if (self.record_s2.isChecked == False):
                                print('error de lectura') 
                elif(header == 3):
                        self.bufferSIII = self.bufferSIII + current_values
                        if (self.record_s3.isChecked() == False):
                                print('error de lectura') 
                elif(header == 4):
                        self.bufferSIV = self.bufferSIV + current_values
                        if (self.record_s4.isChecked()== False):
                                print('error de lectura') 
                elif(header == 5):
                        self.bufferSV = self.bufferSV + current_values
                        if (self.record_s5.isChecked()== False):
                                print('error de lectura') 
                else:
                        print('error de lectura Arduino A')
                        print(header)

    def datosArdB(self, cant_buffer):
        if(cant_buffer == 101):
                valSignal = self.serialArduinoB.read(size=502)
        if(cant_buffer == 102):
                valSignal = self.serialArduinoB.read(size=1004)
        if(cant_buffer == 103):
                valSignal = self.serialArduinoB.read(size=1506)
        if(cant_buffer == 104):
                valSignal = self.serialArduinoB.read(size=2008)
        if(cant_buffer == 105):
                valSignal = self.serialArduinoB.read(size=2510)

        for i in range(0, len(valSignal) - 1, 2):
                val2 = ord(valSignal[i:i+1])
                val3 = ord(valSignal[i+1:i+2])
                val4 = val2*256+val3
                self.valSignalPB.append(val4)
                #print(header)

        for j in range(0, len(self.valSignalPB) - 1, 251):
                header = self.valSignalPB[j]
                current_values = self.valSignalPB[j+1:j+251]
                if(header == 6):
                        self.bufferSVI = self.bufferSVI + current_values
                        if (self.record_s6.isChecked == False):
                                print('error de lectura') 
                elif(header == 7):
                        self.bufferSVII = self.bufferSVII + current_values
                        if (self.record_s7.isChecked == False):
                                print('error de lectura') 
                elif(header == 8):
                        self.bufferSVIII = self.bufferSVIII + current_values
                        if (self.record_s8.isChecked() == False):
                                print('error de lectura') 
                elif(header == 9):
                        self.bufferSIX = self.bufferSIX + current_values
                        if (self.record_s9.isChecked()== False):
                                print('error de lectura')
                elif(header == 10):
                        self.bufferSX = self.bufferSX + current_values
                        if (self.record_s10.isChecked()== False):
                                print('error de lectura')
                else:
                        print('error de lectura Arduino B')

    def datosArdC(self, cant_buffer):
        if(cant_buffer == 101):
                valSignal = self.serialArduinoC.read(size=502)
        if(cant_buffer == 102):
                valSignal = self.serialArduinoC.read(size=1004)
        if(cant_buffer == 103):
                valSignal = self.serialArduinoC.read(size=1506)
        if(cant_buffer == 104):
                valSignal = self.serialArduinoC.read(size=2008)
        if(cant_buffer == 105):
                valSignal = self.serialArduinoC.read(size=2510)

        for i in range(0, len(valSignal) - 1, 2):
                val2 = ord(valSignal[i:i+1])
                
                val3 = ord(valSignal[i+1:i+2])
                
                val4 = val2*256+val3
                
                self.valSignalPC.append(val4)
                #print(header)

        for j in range(0, len(self.valSignalPC) - 1, 251):
                header = self.valSignalPC[j]
                current_values = self.valSignalPC[j+1:j+251]
                if(header == 11):
                        self.bufferSXI = self.bufferSXI + current_values
                        if (self.record_s11.isChecked == False):
                                print('error de lectura') 
                elif(header == 12):
                        self.bufferSXII = self.bufferSXII + current_values
                        if (self.record_s12.isChecked == False):
                                print('error de lectura') 
                elif(header == 13):
                        self.bufferSXIII = self.bufferSXIII + current_values
                        if (self.record_s13.isChecked() == False):
                                print('error de lectura') 
                elif(header == 14):
                        self.bufferSXIV = self.bufferSXIV + current_values
                        if (self.record_s14.isChecked()== False):
                                print('error de lectura')
                elif(header == 15):
                        self.bufferSXV = self.bufferSXV + current_values
                        if (self.record_s15.isChecked()== False):
                                print('error de lectura')
                else:
                        print('error de lectura Arduino C')

    def updateRecordArd(self):
        #print("arranca updaterecord")
        if(self.connectedA==True):
                self.valSignalPA = []
                self.serialArduinoA.write(b's')
                cantSignal = self.serialArduinoA.read(size=2)
                cant_buffer = cantSignal[0] * 256 + cantSignal[1]
                #print("datosA",cant_buffer)
                if(cant_buffer > 199 and cant_buffer < 206):
                        #print(time.time())
                        cant_buffer = cant_buffer - 100
                        if (self.connectedCy == True):
                                data = self.board.get_board_data()
                        #if (self.connectedCD == True):
                        #        data = self.board.get_boardDaisy_data()
                        if(cant_buffer != 100):
                                self.datosArdA(cant_buffer)
                        self.syncro(data) #Llamo a la funcion que va a tomar datos de cyton (y asi sincronizar con ard)
                        #return None
                else:
                    if(cant_buffer != 100):
                        print("datosA",cant_buffer)
                        self.datosArdA(cant_buffer)
                        
        if(self.connectedB==True):
                self.valSignalPB = []
                self.serialArduinoB.write(b's')
                cantSignal = self.serialArduinoB.read(size=2)
                cant_bufferB = cantSignal[0] * 256 + cantSignal[1]
                #print("datosB",cant_bufferB)
                if(cant_bufferB > 199 and cant_bufferB < 206):
                        cant_bufferB = cant_bufferB - 100
                        if (self.connectedCy == True):
                                data = self.board.get_board_data()
                        if(cant_bufferB != 100):
                                self.datosArdB(cant_bufferB)
                        self.syncro(data) #Llamo a la funcion que va a tomar datos de cyton (y asi sincronizar con ard)
                        #return None
                elif(cant_bufferB != 100):
                        print("datosB",cant_bufferB)
                        self.datosArdB(cant_bufferB)
        
        if(self.connectedC==True):
                self.valSignalPC = []
                self.serialArduinoC.write(b's')
                cant_bufferC = self.serialArduinoC.read(size=1)
                cant_bufferC = int.from_bytes(cant_bufferC, "big",signed=False)
                #print("datosC",cant_bufferC)
                if(cant_bufferC != 100):
                        #print(time.time())
                        print("datosC",cant_bufferC)
                        self.datosArdC(cant_bufferC)
        print("...")                    

        if(self.currentTime >= self.timeout):
                self.stopRecord()
        if(self.currentTime >= self.timeReset):
                print("Cortamos el record")
                print(time.time())
                self.resetRecord()
    
    def recordOnlyCy(self):
        if time.time() >= self.timeout:
                self.stopRecord()
        if time.time() >= self.timeReset:
                self.resetRecord()

    def saveData(self):
        print("Arranca SaveData")
        print(time.time())
        self.contador = self.contador + 1 #variable que aumenta en 1 cada vez que se llama a la funcion resetRecord
        
        if(self.connectedCy == True):
                #.board.stop_stream() #para la cyton
                if(self.connectedA==True or self.connectedB==True):
                        data_mia = self.bufferCyton[[1,2,3,4,5,6,7,8], :]
                        basura = self.board.get_board_data()
                        #print(basura)
                else:
                        data = self.board.get_board_data()
                        data_mia = data[[1,2,3,4,5,6,7,8], :]
                DataFilter.write_file(data_mia, 'Senal-EEG.csv', 'a')  # use 'a' for append mode

                self.bufferCyton = np.ndarray(shape=(24,0), dtype= np.float64)

        # if(self.connectedCD==True):
        #         #self.boardDaisy.stop_stream()# para la cyton + Daisy   
        #         #Limpio el ringBuffer y pongo sus datos en un csv
        #         if(self.connectedA==True or self.connectedB==True):
        #                 data_mia = self.bufferCyton[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], :]
        #                 basura = self.boardDaisy.get_board_data()
        #         else:
        #                 data = self.boardDaisy.get_board_data()
        #                 data_mia=data[[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], :] 
        #         DataFilter.write_file(data_mia, 'Signal-EEG-Pueba.csv', 'a')  # use 'a' for append mode

        #         self.bufferCyton = np.ndarray(shape=(32,0), dtype= np.float64)
        print("Termino de guardar cyton")
        print(time.time())

        if(self.connectedA==True):
                #self.serialArduinoA.write(b'r')
                if(self.record_s1.isChecked()):     
                        self.nombreSI = ['ECG - 250']
                        dfSI = pd.DataFrame(data=self.bufferSI)
                        dfSI.to_csv(path_or_buf= self.path + '/Signal-SI(' + str(self.contador) + ').csv',index=False,header=self.nombreSI)
                        self.bufferSI = []
                
                if(self.record_s2.isChecked()):             
                        self.nombreSII = ['EMG - 250']
                        dfSII = pd.DataFrame(data=self.bufferSII)
                        dfSII.to_csv(path_or_buf= self.path + '/Signal-SII(' + str(self.contador) + ').csv',index=False,header=self.nombreSII)
                        self.bufferSII = []  
                
                if(self.record_s3.isChecked()):              
                        self.nombreSIII = ['Señal 3 - 250']
                        dfSIII = pd.DataFrame(data=self.bufferSIII)
                        dfSIII.to_csv(path_or_buf= self.path + '/Signal-SIII(' + str(self.contador) + ').csv',index=False,header=self.nombreSIII)
                        self.bufferSIII = [] 

                if(self.record_s4.isChecked()):
                        self.nombreSIV = ['Señal 4 - 250']
                        dfSIV = pd.DataFrame(data=self.bufferSIV)
                        dfSIV.to_csv(path_or_buf= self.path + '/Signal-SIV-2S(' + str(self.contador) + ').csv',index=False,header=self.nombreSIV)
                        self.bufferSIV = []

                if(self.record_s5.isChecked()):
                        self.nombreSV = ['Señal 5 - 250']
                        dfSV = pd.DataFrame(data=self.bufferSV)
                        dfSV.to_csv(path_or_buf= self.path + '/Signal-SV-2S(' + str(self.contador) + ').csv',index=False,header=self.nombreSV)
                        self.bufferSV = []
        print("Guardamos ArdA")
        print(time.time())

        if(self.connectedB==True):
                #self.serialArduinoB.write(b'r')
     
                if(self.record_s6.isChecked()):             
                        self.nombreSVI = ['Señal 6 - 250']
                        dfSVI = pd.DataFrame(data=self.bufferSVI)
                        dfSVI.to_csv(path_or_buf = self.path + '/Signal-SVI(' + str(self.contador) + ').csv',index=False,header=self.nombreSVI)
                        self.bufferSVI = []
                
                if(self.record_s7.isChecked()):              
                        self.nombreSVII = ['Señal 7 - 250']
                        dfSVII = pd.DataFrame(data=self.bufferSVII)
                        dfSVII.to_csv(path_or_buf = self.path + '/Signal-SVII(' + str(self.contador) + ').csv',index=False,header=self.nombreSVII)
                        self.bufferSVII = [] 

                if(self.record_s8.isChecked()):
                        self.nombreSVIII = ['Señal 8 - 250']
                        dfSVIII = pd.DataFrame(data=self.bufferSVIII)
                        dfSVIII.to_csv(path_or_buf = self.path + '/Signal-SVIII(' + str(self.contador) + ').csv',index=False,header=self.nombreSVIII)
                        self.bufferSVIII = []

                if(self.record_s9.isChecked()):
                        self.nombreSIX = ['Señal 9 - 250']
                        dfSIX = pd.DataFrame(data=self.bufferSIX)
                        dfSIX.to_csv(path_or_buf = self.path + '/Signal-SIX(' + str(self.contador) + ').csv',index=False,header=self.nombreSIX)
                        self.bufferSIX = []

                if(self.record_s10.isChecked()):
                        self.nombreSX = ['Señal 10 - 250']
                        dfSX = pd.DataFrame(data=self.bufferSX)
                        dfSX.to_csv(path_or_buf = self.path + '/Signal-SX(' + str(self.contador) + ').csv',index=False,header=self.nombreSX)
                        self.bufferSX = []
                print("Guardamos ArdB")
                print(time.time())

        if(self.connectedC==True):
                #self.serialArduinoC.write(b'r')
     
                if(self.record_s11.isChecked()):             
                        self.nombreSXI = ['Señal 11 - 250']
                        dfSXI = pd.DataFrame(data=self.bufferSXI)
                        dfSXI.to_csv(path_or_buf = self.path + '/Signal-SXI(' + str(self.contador) + ').csv',index=False,header=self.nombreSXI)
                        self.bufferSXI = []
                
                if(self.record_s12.isChecked()):              
                        self.nombreSXII = ['Señal 12 - 250']
                        dfSXII = pd.DataFrame(data=self.bufferSXII)
                        dfSXII.to_csv(path_or_buf = self.path + '/Signal-SXII(' + str(self.contador) + ').csv',index=False,header=self.nombreSXII)
                        self.bufferSXII = []

                if(self.record_s13.isChecked()):
                        self.nombreSXIII = ['Señal 13 - 250']
                        dfSXIII = pd.DataFrame(data=self.bufferSXIII)
                        dfSXIII.to_csv(path_or_buf = self.path + '/Signal-SXIII(' + str(self.contador) + ').csv',index=False,header=self.nombreSXIII)
                        self.bufferSXIII = []

                if(self.record_s14.isChecked()):
                        self.nombreSXIV = ['Señal 14 - 250']
                        dfSXIV = pd.DataFrame(data=self.bufferSXIV)
                        dfSXIV.to_csv(path_or_buf = self.path + '/Signal-SXIV(' + str(self.contador) + ').csv',index=False,header=self.nombreSXIV)
                        self.bufferSXIV = []

                if(self.record_s15.isChecked()):
                        self.nombreSXV = ['Señal 15 - 250']
                        dfSXV = pd.DataFrame(data=self.bufferSXV)
                        dfSXV.to_csv(path_or_buf = self.path + '/Signal-SXV(' + str(self.contador) + ').csv',index=False,header=self.nombreSXV)
                        self.bufferSXV = []
                print("Guardamos ArdC")
                print(time.time())

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
