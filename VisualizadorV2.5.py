# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'VisualizadorV2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from importlib.metadata import metadata
from PyQt5 import QtCore, QtGui, QtWidgets
from pyqtgraph import GraphicsLayoutWidget

import brainflow
from brainflow.data_filter import DataFilter, FilterTypes, AggOperations, NoiseTypes
import numpy as np
import pandas as pd

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1177, 730)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(1)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setStyleSheet("background-color: rgb(191, 191, 191);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_14.setContentsMargins(2, 2, 2, 2)
        self.horizontalLayout_14.setSpacing(1)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.groupBox = QtWidgets.QGroupBox(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox.setFont(font)
        self.groupBox.setStyleSheet("color: rgb(0, 0, 0);")
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.groupBox)
        self.horizontalLayout_2.setContentsMargins(2, 2, 2, 2)
        self.horizontalLayout_2.setSpacing(1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_7.addItem(spacerItem)
        self.importEEG = QtWidgets.QPushButton(self.groupBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.importEEG.setFont(font)
        self.importEEG.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);\n""")
        self.importEEG.setObjectName("importEEG")
        self.verticalLayout_7.addWidget(self.importEEG)
        self.importEEG.clicked.connect(self.getEEG)

        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_7.addItem(spacerItem1)
        self.importSignal = QtWidgets.QPushButton(self.groupBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.importSignal.setFont(font)
        self.importSignal.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.importSignal.setObjectName("importSignal")
        self.verticalLayout_7.addWidget(self.importSignal)
        self.importSignal.clicked.connect(self.getCSV)

        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_7.addItem(spacerItem2)
        self.ExportCsv = QtWidgets.QPushButton(self.groupBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.ExportCsv.setFont(font)
        self.ExportCsv.setStyleSheet("color: rgb(0, 0, 0);\n"
"background-color: rgb(255, 255, 255);")
        self.ExportCsv.setObjectName("ExportCsv")
        self.verticalLayout_7.addWidget(self.ExportCsv)
        self.ExportCsv.clicked.connect(self.exportCSV)

        self.horizontalLayout_2.addLayout(self.verticalLayout_7)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(0, 0, 0);")
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)
        self.listWidget_importadas = QtWidgets.QListWidget(self.groupBox)
        self.listWidget_importadas.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.listWidget_importadas.setObjectName("listWidget_importadas")
        self.verticalLayout_3.addWidget(self.listWidget_importadas)
        self.horizontalLayout_2.addLayout(self.verticalLayout_3)
        self.horizontalLayout_14.addWidget(self.groupBox)
        self.groupBox_2 = QtWidgets.QGroupBox(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setStyleSheet("color: rgb(0, 0, 0);")
        self.groupBox_2.setObjectName("groupBox_2")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.groupBox_2)
        self.horizontalLayout_16.setContentsMargins(2, 2, 2, 2)
        self.horizontalLayout_16.setSpacing(2)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_2 = QtWidgets.QLabel(self.groupBox_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_4.addWidget(self.label_2)
        self.listWidget_graficadas = QtWidgets.QListWidget(self.groupBox_2)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.listWidget_graficadas.setFont(font)
        self.listWidget_graficadas.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.listWidget_graficadas.setObjectName("listWidget_graficadas")
        self.verticalLayout_4.addWidget(self.listWidget_graficadas)
        self.horizontalLayout_16.addLayout(self.verticalLayout_4)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setSpacing(2)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_8.addItem(spacerItem3)
        self.graficar = QtWidgets.QPushButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.graficar.setFont(font)
        self.graficar.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.graficar.setObjectName("graficar")
        self.verticalLayout_8.addWidget(self.graficar)
        self.graficar.clicked.connect(self.dibujar)

        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_8.addItem(spacerItem4)
        self.deleteSignal = QtWidgets.QPushButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.deleteSignal.setFont(font)
        self.deleteSignal.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.deleteSignal.setObjectName("deleteSignal")
        self.verticalLayout_8.addWidget(self.deleteSignal)
        self.deleteSignal.clicked.connect(self.clearone)

        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_8.addItem(spacerItem5)
        self.clearAll = QtWidgets.QPushButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.clearAll.setFont(font)
        self.clearAll.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.clearAll.setObjectName("clearAll")
        self.verticalLayout_8.addWidget(self.clearAll)
        self.clearAll.clicked.connect(self.clear)

        self.horizontalLayout_16.addLayout(self.verticalLayout_8)
        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_5.setFont(font)
        self.groupBox_5.setObjectName("groupBox_5")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.groupBox_5)
        self.verticalLayout_16.setContentsMargins(2, 2, 2, 2)
        self.verticalLayout_16.setSpacing(30)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setSpacing(1)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setSpacing(0)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.label_12 = QtWidgets.QLabel(self.groupBox_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_12.setFont(font)
        self.label_12.setObjectName("label_12")
        self.verticalLayout_14.addWidget(self.label_12)
        self.spinBox_min = QtWidgets.QSpinBox(self.groupBox_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.spinBox_min.setFont(font)
        self.spinBox_min.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.spinBox_min.setMaximum(30000)
        self.spinBox_min.setObjectName("spinBox_min")
        self.verticalLayout_14.addWidget(self.spinBox_min)
        self.spinBox_min.valueChanged.connect(self.actualizarEje)

        self.horizontalLayout_13.addLayout(self.verticalLayout_14)
        self.verticalLayout_15 = QtWidgets.QVBoxLayout()
        self.verticalLayout_15.setSpacing(0)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.label_13 = QtWidgets.QLabel(self.groupBox_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_13.setFont(font)
        self.label_13.setObjectName("label_13")
        self.verticalLayout_15.addWidget(self.label_13)
        self.spinBox_max = QtWidgets.QSpinBox(self.groupBox_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.spinBox_max.setFont(font)
        self.spinBox_max.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.spinBox_max.setMinimum(30)
        self.spinBox_max.setMaximum(30000)
        self.spinBox_max.setObjectName("spinBox_max")
        self.verticalLayout_15.addWidget(self.spinBox_max)
        self.spinBox_max.valueChanged.connect(self.actualizarEje)

        self.horizontalLayout_13.addLayout(self.verticalLayout_15)
        self.verticalLayout_16.addLayout(self.horizontalLayout_13)
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_16.addItem(spacerItem6)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setSpacing(1)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.bajar = QtWidgets.QPushButton(self.groupBox_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.bajar.setFont(font)
        self.bajar.setObjectName("bajar")
        self.horizontalLayout_3.addWidget(self.bajar)
        self.bajar.clicked.connect(self.retroceder)

        self.subir = QtWidgets.QPushButton(self.groupBox_5)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.subir.setFont(font)
        self.subir.setObjectName("subir")
        self.horizontalLayout_3.addWidget(self.subir)
        self.subir.clicked.connect(self.avanzar)

        self.verticalLayout_16.addLayout(self.horizontalLayout_3)
        self.verticalLayout_16.setStretch(0, 1)
        self.verticalLayout_16.setStretch(2, 2)
        self.horizontalLayout_16.addWidget(self.groupBox_5)
        self.horizontalLayout_16.setStretch(0, 3)
        self.horizontalLayout_16.setStretch(1, 2)
        self.horizontalLayout_16.setStretch(2, 1)
        self.horizontalLayout_14.addWidget(self.groupBox_2)
        self.groupBox_3 = QtWidgets.QGroupBox(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setStyleSheet("color: rgb(0, 0, 0);")
        self.groupBox_3.setObjectName("groupBox_3")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.groupBox_3)
        self.horizontalLayout_9.setContentsMargins(2, 2, 2, 2)
        self.horizontalLayout_9.setSpacing(10)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.notch = QtWidgets.QRadioButton(self.groupBox_3)
        self.notch.setEnabled(True)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.notch.setFont(font)
        self.notch.setChecked(True)
        self.notch.setObjectName("notch")
        self.verticalLayout_5.addWidget(self.notch)
        self.notch.clicked.connect(self.parameter)

        self.pasabajos = QtWidgets.QRadioButton(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pasabajos.setFont(font)
        self.pasabajos.setObjectName("pasabajos")
        self.pasabajos.clicked.connect(self.parameter)

        self.verticalLayout_5.addWidget(self.pasabajos)
        self.pasaaltos = QtWidgets.QRadioButton(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pasaaltos.setFont(font)
        self.pasaaltos.setObjectName("pasaaltos")
        self.verticalLayout_5.addWidget(self.pasaaltos)
        self.pasaaltos.clicked.connect(self.parameter)

        self.pasabanda = QtWidgets.QRadioButton(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pasabanda.setFont(font)
        self.pasabanda.setObjectName("pasabanda")
        self.verticalLayout_5.addWidget(self.pasabanda)
        self.pasabanda.clicked.connect(self.parameter)

        self.rechazabanda = QtWidgets.QRadioButton(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.rechazabanda.setFont(font)
        self.rechazabanda.setObjectName("rechazabanda")
        self.verticalLayout_5.addWidget(self.rechazabanda)
        self.rechazabanda.clicked.connect(self.parameter)

        self.verticalLayout_9.addLayout(self.verticalLayout_5)
        self.aplicarFiltro = QtWidgets.QPushButton(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.aplicarFiltro.setFont(font)
        self.aplicarFiltro.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.aplicarFiltro.setObjectName("aplicarFiltro")
        self.verticalLayout_9.addWidget(self.aplicarFiltro)
        self.aplicarFiltro.clicked.connect(self.aplicar_filtro)

        self.horizontalLayout_9.addLayout(self.verticalLayout_9)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_4 = QtWidgets.QLabel(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_8.addWidget(self.label_4)
        self.comboBox_tipoFiltro = QtWidgets.QComboBox(self.groupBox_3)
        self.comboBox_tipoFiltro.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.comboBox_tipoFiltro.setFont(font)
        self.comboBox_tipoFiltro.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_tipoFiltro.setObjectName("comboBox_tipoFiltro")
        self.comboBox_tipoFiltro.addItem("")
        self.comboBox_tipoFiltro.addItem("")
        self.comboBox_tipoFiltro.addItem("")
        self.horizontalLayout_8.addWidget(self.comboBox_tipoFiltro)
        self.comboBox_tipoFiltro.currentIndexChanged.connect(self.parameter2)

        self.verticalLayout_6.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_3 = QtWidgets.QLabel(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_7.addWidget(self.label_3)
        self.spinBox_orden = QtWidgets.QSpinBox(self.groupBox_3)
        self.spinBox_orden.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.spinBox_orden.setFont(font)
        self.spinBox_orden.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.spinBox_orden.setObjectName("spinBox_orden")
        self.horizontalLayout_7.addWidget(self.spinBox_orden)
        self.verticalLayout_6.addLayout(self.horizontalLayout_7)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_5 = QtWidgets.QLabel(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout.addWidget(self.label_5)
        self.frecMuestreo = QtWidgets.QLineEdit(self.groupBox_3)
        self.frecMuestreo.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.frecMuestreo.setFont(font)
        self.frecMuestreo.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frecMuestreo.setObjectName("frecMuestreo")
        self.horizontalLayout.addWidget(self.frecMuestreo)
        self.verticalLayout_6.addLayout(self.horizontalLayout)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_6 = QtWidgets.QLabel(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_4.addWidget(self.label_6)
        self.frecCorte = QtWidgets.QLineEdit(self.groupBox_3)
        self.frecCorte.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.frecCorte.setFont(font)
        self.frecCorte.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frecCorte.setObjectName("frecCorte")
        self.horizontalLayout_4.addWidget(self.frecCorte)
        self.verticalLayout_6.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_8 = QtWidgets.QLabel(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_5.addWidget(self.label_8)
        self.anchoBanda = QtWidgets.QLineEdit(self.groupBox_3)
        self.anchoBanda.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.anchoBanda.setFont(font)
        self.anchoBanda.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.anchoBanda.setObjectName("anchoBanda")
        self.horizontalLayout_5.addWidget(self.anchoBanda)
        self.verticalLayout_6.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_7 = QtWidgets.QLabel(self.groupBox_3)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_6.addWidget(self.label_7)
        self.ripple = QtWidgets.QLineEdit(self.groupBox_3)
        self.ripple.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.ripple.setFont(font)
        self.ripple.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.ripple.setObjectName("ripple")
        self.horizontalLayout_6.addWidget(self.ripple)
        self.verticalLayout_6.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_9.addLayout(self.verticalLayout_6)
        self.horizontalLayout_14.addWidget(self.groupBox_3)
        self.groupBox_4 = QtWidgets.QGroupBox(self.frame_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setStyleSheet("color: rgb(0, 0, 0);")
        self.groupBox_4.setObjectName("groupBox_4")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.groupBox_4)
        self.horizontalLayout_15.setContentsMargins(2, 2, 2, 2)
        self.horizontalLayout_15.setSpacing(10)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.rolling = QtWidgets.QRadioButton(self.groupBox_4)
        self.rolling.setEnabled(True)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.rolling.setFont(font)
        self.rolling.setChecked(True)
        self.rolling.setObjectName("rolling")
        self.verticalLayout_10.addWidget(self.rolling)
        self.rolling.clicked.connect(self.parameter3)

        self.downsampling = QtWidgets.QRadioButton(self.groupBox_4)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.downsampling.setFont(font)
        self.downsampling.setObjectName("downsampling")
        self.verticalLayout_10.addWidget(self.downsampling)
        self.downsampling.clicked.connect(self.parameter3)

        self.windowing = QtWidgets.QRadioButton(self.groupBox_4)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.windowing.setFont(font)
        self.windowing.setObjectName("windowing")
        self.verticalLayout_10.addWidget(self.windowing)
        self.windowing.clicked.connect(self.parameter3)

        self.verticalLayout_13.addLayout(self.verticalLayout_10)
        self.pushButton_7 = QtWidgets.QPushButton(self.groupBox_4)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton_7.setFont(font)
        self.pushButton_7.setStyleSheet("color: rgb(0, 0, 0);\n""background-color: rgb(255, 255, 255);")
        self.pushButton_7.setObjectName("pushButton_7")
        self.verticalLayout_13.addWidget(self.pushButton_7)
        self.pushButton_7.clicked.connect(self.procesamiento)

        self.horizontalLayout_15.addLayout(self.verticalLayout_13)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_11 = QtWidgets.QLabel(self.groupBox_4)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_11.setFont(font)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_10.addWidget(self.label_11)
        self.tamao_ven = QtWidgets.QLineEdit(self.groupBox_4)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.tamao_ven.setFont(font)
        self.tamao_ven.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tamao_ven.setObjectName("tamao_ven")
        self.horizontalLayout_10.addWidget(self.tamao_ven)
        self.verticalLayout_11.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_10 = QtWidgets.QLabel(self.groupBox_4)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_11.addWidget(self.label_10)
        self.comboBox_ventana = QtWidgets.QComboBox(self.groupBox_4)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.comboBox_ventana.setFont(font)
        self.comboBox_ventana.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_ventana.setObjectName("comboBox_ventana")
        self.comboBox_ventana.addItem("")
        self.comboBox_ventana.addItem("")
        self.comboBox_ventana.addItem("")
        self.comboBox_ventana.addItem("")
        self.horizontalLayout_11.addWidget(self.comboBox_ventana)
        self.verticalLayout_11.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_9 = QtWidgets.QLabel(self.groupBox_4)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_12.addWidget(self.label_9)
        self.comboBox_operation = QtWidgets.QComboBox(self.groupBox_4)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.comboBox_operation.setFont(font)
        self.comboBox_operation.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_operation.setObjectName("comboBox_operation")
        self.comboBox_operation.addItem("")
        self.comboBox_operation.addItem("")
        self.comboBox_operation.addItem("")
        self.horizontalLayout_12.addWidget(self.comboBox_operation)
        self.verticalLayout_11.addLayout(self.horizontalLayout_12)
        self.horizontalLayout_15.addLayout(self.verticalLayout_11)
        self.horizontalLayout_14.addWidget(self.groupBox_4)
        self.horizontalLayout_14.setStretch(0, 2)
        self.horizontalLayout_14.setStretch(1, 3)
        self.horizontalLayout_14.setStretch(2, 2)
        self.horizontalLayout_14.setStretch(3, 2)
        self.verticalLayout.addWidget(self.frame_2)
        self.scrollArea = QtWidgets.QScrollArea(self.frame)
        self.scrollArea.setMinimumSize(QtCore.QSize(0, 500))
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1160, 540))
        self.scrollAreaWidgetContents.setMinimumSize(QtCore.QSize(0, 500))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12.setSpacing(0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.graphicsView = GraphicsLayoutWidget(self.scrollAreaWidgetContents)
        self.graphicsView.setObjectName("graphicsView")
        self.verticalLayout_12.addWidget(self.graphicsView)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout.addWidget(self.scrollArea)
        self.verticalLayout.setStretch(0, 3)
        self.verticalLayout.setStretch(1, 10)
        self.verticalLayout_2.addWidget(self.frame)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Se definen variables que se van a utilizar en las funciones
        self.señales_importadas_lista = []
        self.señales_graficadas_lista = []
        self.contador = 0

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "Señales"))
        self.importEEG.setText(_translate("MainWindow", "Importar EEG"))
        self.importSignal.setText(_translate("MainWindow", "Importar Señales"))
        self.ExportCsv.setText(_translate("MainWindow", "Exportar CSV"))
        self.label.setText(_translate("MainWindow", "Señales"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Visualización"))
        self.label_2.setText(_translate("MainWindow", "Señales graficadas"))
        self.graficar.setText(_translate("MainWindow", "Graficar"))
        self.deleteSignal.setText(_translate("MainWindow", "Eliminar señal"))
        self.clearAll.setText(_translate("MainWindow", "Limpiar"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Eje Temporal"))
        self.label_12.setText(_translate("MainWindow", "Min"))
        self.label_13.setText(_translate("MainWindow", "Max"))
        self.bajar.setText(_translate("MainWindow", "<"))
        self.subir.setText(_translate("MainWindow", ">"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Filtros"))
        self.notch.setText(_translate("MainWindow", "Notch (50 Hz)"))
        self.pasabajos.setText(_translate("MainWindow", "Pasabajos"))
        self.pasaaltos.setText(_translate("MainWindow", "Pasaaltos"))
        self.pasabanda.setText(_translate("MainWindow", "Pasabanda"))
        self.rechazabanda.setText(_translate("MainWindow", "Rechazabanda"))
        self.aplicarFiltro.setText(_translate("MainWindow", "Aplicar filtro"))
        self.label_4.setText(_translate("MainWindow", "Tipo:"))
        self.comboBox_tipoFiltro.setItemText(0, _translate("MainWindow", "BUTTERWORTH"))
        self.comboBox_tipoFiltro.setItemText(1, _translate("MainWindow", "CHEBYSHEV_TYPE_1"))
        self.comboBox_tipoFiltro.setItemText(2, _translate("MainWindow", "BESSEL"))
        self.label_3.setText(_translate("MainWindow", "Orden:"))
        self.label_5.setText(_translate("MainWindow", "Frecuencia de muestreo:"))
        self.label_6.setText(_translate("MainWindow", "Frecuencia de corte:"))
        self.label_8.setText(_translate("MainWindow", "Ancho de banda:"))
        self.label_7.setText(_translate("MainWindow", "Ripple:"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Otros procesamientos"))
        self.rolling.setText(_translate("MainWindow", "Rolling filter"))
        self.downsampling.setText(_translate("MainWindow", "Downsampling"))
        self.windowing.setText(_translate("MainWindow", "Windowing"))
        self.pushButton_7.setText(_translate("MainWindow", "Aplicar"))
        self.label_11.setText(_translate("MainWindow", "Tamaño de la ventana:"))
        self.label_10.setText(_translate("MainWindow", "Ventana:"))
        self.comboBox_ventana.setItemText(0, _translate("MainWindow", "NO_WINDOW"))
        self.comboBox_ventana.setItemText(1, _translate("MainWindow", "HANNING"))
        self.comboBox_ventana.setItemText(2, _translate("MainWindow", "HAMMING"))
        self.comboBox_ventana.setItemText(3, _translate("MainWindow", "BLACKMAN_HARRIS"))
        self.label_9.setText(_translate("MainWindow", "Operación:"))
        self.comboBox_operation.setItemText(0, _translate("MainWindow", "MEAN"))
        self.comboBox_operation.setItemText(1, _translate("MainWindow", "MEDIAN"))
        self.comboBox_operation.setItemText(2, _translate("MainWindow", "EACH"))

    def getEEG(self):
        filePath, _ = QtWidgets.QFileDialog.getOpenFileName(None, 'Open file', 'C:/Users/Tassara')
        if filePath != "":
            print ("Dirección",filePath) #Opcional imprimir la dirección del archivo
            y_position = DataFilter.read_file(str(filePath))
            y_position = y_position / 1000000
            print(np.shape(y_position))
        
        dataName = 'Cyton'
        fs = 250
        self.señales_importadas_lista +=[{"nombre":dataName,"frec":fs,"datos":y_position}]
        self.listWidget_importadas.addItem(dataName)

    def getCSV(self):
        self.contador = self.contador + 1
        filePath, _ = QtWidgets.QFileDialog.getOpenFileName(None, 'Open file', 'C:/Users/Tassara')
        if filePath != "":
            print ("Dirección",filePath) #Opcional imprimir la dirección del archivo
            self.df = pd.read_csv(str(filePath),index_col=None, header=0)
        
        dataFrame = self.df.values
        metadata = str(self.df.columns[0])
        dataName = metadata[0:3]
        fs = int(metadata[metadata.find("-")+2:len(metadata)])

        y_position = []

        for i in range(0, len(dataFrame)):
            if(dataName[0:3] == "ECG"):
                #y_position.append((((dataFrame[i][0])/1024)-1.65)/1.1)
                #y_position.append((((dataFrame[i][0])*5)/1024)/571)
                y_position.append(((int(dataFrame[i][0]))*5)/1024)

            if(dataName[0:3] == "EMG"):
                #y_position.append((((dataFrame[i][0])/1024)-1.65)/1.009)
                y_position.append(((int(dataFrame[i][0]))*5)/1024)
            else:
                y_position.append(((dataFrame[i][0])*5)/1024)
        
        self.señales_importadas_lista +=[{"nombre":dataName,"frec":fs,"datos":y_position}]
        self.listWidget_importadas.addItem(dataName)

    def exportCSV(self):
        indice_senal_seleccionada = [item.row() for item in self.listWidget_importadas.selectedIndexes()]
        item = self.listWidget_importadas.currentItem().text()

        if len(indice_senal_seleccionada) != 1:
                print("Tenés que seleccionar una señal a exportar!")
        else:
                mi_senal = self.señales_importadas_lista[indice_senal_seleccionada[0]]
                nombreS = [mi_senal["nombre"]]
                dfS = pd.DataFrame(data=mi_senal["datos"])
                dfS.to_csv(path_or_buf = 'C:/Users/Tassara/Exported-S.csv',index=False,header=nombreS)
                
    def plotear(self):
        #https://pyqtgraph.readthedocs.io/en/latest/graphicsItems/plotitem.html
        #1ro, graficar todo lo que está en señales_graficadas_lista
        self.graphicsView.clear() #Se eliminan todas las señales ploteadas
        counter = 0
        i = 0
        for senal in self.señales_graficadas_lista:
            #y = senal["datos"][0][0:int(senal["fs"][0]*10)]
            y = senal["datos"]
            nombre = senal["nombre"]
            frecMuestreo = senal["frec"]
            print(nombre)
            print(len(y))
            x = np.linspace(0,len(y)/frecMuestreo,len(y))
            if i == 0:
                self.w0 = self.graphicsView.addPlot(row=0, col=0, title=nombre)
                self.w0.plot(x,y,pen='g')
                self.w0.showGrid(x = True, y = True, alpha = 0.5)
                self.w0.setLabel('left',units="V")

            if(i != 0):
                print(i)
                print(counter)
                locals()["w"+str(i)] = self.graphicsView.addPlot(row=counter, col=0, title=nombre)
                #print(y)
                locals()["w"+str(i)].plot(x,y,pen='g')
                locals()["w"+str(i)].setLabel('left',units="V")
                
                locals()["w"+str(i)].showGrid(x = True, y = True, alpha = 0.5)
                if i == 1:
                        locals()["w"+str(i)].setXLink(self.w0)
                else:
                        locals()["w"+str(i)].setXLink(locals()["w"+str(i-1)])
            if i > 4:
                self.scrollAreaWidgetContents.setMinimumSize(QtCore.QSize(0, 2000))
            else:
                self.scrollAreaWidgetContents.setMinimumSize(QtCore.QSize(0, 500))
            #self.axis_lista.append(w)
            #for w in self.axis_lista:
            #    w.setXLink(w)#Linkea los dos sublot desde el eje x
            counter = counter + 1
            i = i + 1

    def retroceder(self):
            min = self.spinBox_min.value()
            max = self.spinBox_max.value()
            diferencia = max - min
            self.w0.setXRange(min - diferencia, min)
            self.spinBox_max.setValue(min)
            self.spinBox_min.setValue(min - diferencia)

    def avanzar(self):
            min = self.spinBox_min.value()
            max = self.spinBox_max.value()
            diferencia = max - min
            self.w0.setXRange(max, max + diferencia)
            self.spinBox_max.setValue(max + diferencia)
            self.spinBox_min.setValue(max)

    def actualizarEje(self):
            self.w0.setXRange(self.spinBox_min.value(), self.spinBox_max.value())

    def dibujar(self):
        indice_senal_seleccionada = [item.row() for item in self.listWidget_importadas.selectedIndexes()]
        item = self.listWidget_importadas.currentItem().text()

        #if item == "EEG":
        if 'Cyton' in item:
            EEGcompleto = self.señales_importadas_lista[indice_senal_seleccionada[0]]
            for i in range (0,8):#Se mueve hasta 8 porque es la cyton pero se tiene que ver que pasa si tiene menos canales o si se trata de la daisy
                self.listWidget_graficadas.addItem(EEGcompleto["nombre"]+str(i+1))
                self.señales_graficadas_lista += [{"nombre":EEGcompleto["nombre"]+str(i+1),"frec":EEGcompleto["frec"],"datos":EEGcompleto["datos"][i]}]               
        else:
            #for i in range(len(indice_senal_seleccionada)):
                #self.listWidget_graficadas.addItem(self.listWidget_importadas.item(indice_senal_seleccionada[i]).text())
                #self.señales_graficadas_lista += [self.señales_importadas_lista[indice_senal_seleccionada[i]]]
                self.listWidget_graficadas.addItem(self.listWidget_importadas.item(indice_senal_seleccionada[0]).text())
                self.señales_graficadas_lista += [self.señales_importadas_lista[indice_senal_seleccionada[0]]]
        
        self.listWidget_importadas.clearSelection()
        self.plotear()

    def clearone(self):
        seleccionados = [item.row() for item in self.listWidget_graficadas.selectedIndexes()]
        for i in range(len(seleccionados)):
            self.listWidget_graficadas.takeItem(seleccionados[i])
            del self.señales_graficadas_lista[seleccionados[i]]
        self.plotear()

    def clear(self):
        self.graphicsView.clear()
        self.listWidget_graficadas.clear()
        self.señales_graficadas_lista=[]

    def aplicar_filtro(self):
        
        indice_senal_seleccionada = [item.row() for item in self.listWidget_importadas.selectedIndexes()]
        item = self.listWidget_importadas.currentItem().text()
        print(indice_senal_seleccionada)

        if len(indice_senal_seleccionada) != 1:
                print("Tenés que seleccionar una señal a filtrar!")
        else:
                if 'Cyton' in item:
                        EEGcompleto = self.señales_importadas_lista[indice_senal_seleccionada[0]]
                        data = np.array(EEGcompleto["datos"], dtype= np.float64)
                        f_s = EEGcompleto["frec"]
                        nombre = EEGcompleto["nombre"]
                        #print(EEGcompleto[7])
                        if (self.notch.isChecked()):
                                nombre_filtro = "N50"
                                for i in range (0,8):#Se mueve hasta 8 porque es la cyton pero se tiene que ver que pasa si tiene menos canales o si se trata de la daisy
                                        DataFilter.remove_environmental_noise(data[i], f_s, NoiseTypes.FIFTY.value)
                        if (self.pasabajos.isChecked()):
                                nombre_filtro = "PB"
                                frec_corte = float(self.frecCorte.text())
                                order = int(self.spinBox_orden.value())
                                tipo = int(self.comboBox_tipoFiltro.currentIndex())
                                if (tipo == 1):
                                        ripple = float(self.ripple.text())
                                else:
                                        ripple = 0
                                for i in range (0,8):#Se mueve hasta 8 porque es la cyton pero se tiene que ver que pasa si tiene menos canales o si se trata de la daisy
                                        DataFilter.perform_lowpass(data[i], f_s, frec_corte, order, tipo, ripple)
                        if (self.pasaaltos.isChecked()):
                                nombre_filtro = "PA"
                                frec_corte = float(self.frecCorte.text())
                                order = int(self.spinBox_orden.value())
                                tipo = int(self.comboBox_tipoFiltro.currentIndex())
                                if (tipo == 1):
                                        ripple = float(self.ripple.text())
                                else:
                                        ripple = 0
                                for i in range (0,8):#Se mueve hasta 8 porque es la cyton pero se tiene que ver que pasa si tiene menos canales o si se trata de la daisy
                                        DataFilter.perform_highpass(data[i], f_s, frec_corte, order, tipo, ripple)
                        if (self.pasabanda.isChecked()):
                                nombre_filtro = "PB"
                                frec_centro = float(self.frecCorte.text())
                                ancho_banda = float(self.anchoBanda.text())
                                order = int(self.spinBox_orden.value())
                                tipo = int(self.comboBox_tipoFiltro.currentIndex())
                                if (tipo == 1):
                                        ripple = float(self.ripple.text())
                                else:
                                        ripple = 0
                                for i in range (0,8):#Se mueve hasta 8 porque es la cyton pero se tiene que ver que pasa si tiene menos canales o si se trata de la daisy
                                        DataFilter.perform_bandpass(data[i], f_s, frec_centro, ancho_banda, order, tipo, ripple)
                        if (self.rechazabanda.isChecked()):
                                nombre_filtro = "RB"   
                                frec_centro = float(self.frecCorte.text())
                                ancho_banda = float(self.anchoBanda.text())
                                order = int(self.spinBox_orden.value())
                                tipo = int(self.comboBox_tipoFiltro.currentIndex())
                                if (tipo == 1):
                                        ripple = float(self.ripple.text())
                                else:
                                        ripple = 0
                                for i in range (0,8):#Se mueve hasta 8 porque es la cyton pero se tiene que ver que pasa si tiene menos canales o si se trata de la daisy
                                        DataFilter.perform_bandstop(data[i], f_s, frec_centro, ancho_banda, order, tipo, ripple)
                        
                        self.señales_importadas_lista += [{"nombre":nombre + "+" + nombre_filtro,"frec":f_s,"datos":data}]
                        #EEGcompleto3 = self.señales_importadas_lista[1]["datos"]
                        #print(EEGcompleto3[7])
                        self.listWidget_importadas.clearSelection()
                        self.listWidget_importadas.addItem(nombre + "+" + nombre_filtro)
                        self.listWidget_importadas.setCurrentRow(-1)

                else:
                        mi_senal = self.señales_importadas_lista[indice_senal_seleccionada[0]]
                        data = np.array(mi_senal["datos"], dtype= np.float64)
                        f_s = mi_senal["frec"]
                        nombre = mi_senal["nombre"]

                        if (self.notch.isChecked()):
                                nombre_filtro = "N50"
                                DataFilter.remove_environmental_noise(data, f_s, NoiseTypes.FIFTY.value)
                        if (self.pasabajos.isChecked()):
                                nombre_filtro = "PBajo"
                                frec_corte = float(self.frecCorte.text())
                                order = int(self.spinBox_orden.value())
                                tipo = int(self.comboBox_tipoFiltro.currentIndex())
                                if (tipo == 1):
                                        ripple = float(self.ripple.text())
                                else:
                                        ripple = 0
                                DataFilter.perform_lowpass(data, f_s, frec_corte, order, tipo, ripple)
                        if (self.pasaaltos.isChecked()):
                                nombre_filtro = "PA"
                                frec_corte = float(self.frecCorte.text())
                                order = int(self.spinBox_orden.value())
                                tipo = int(self.comboBox_tipoFiltro.currentIndex())
                                if (tipo == 1):
                                        ripple = float(self.ripple.text())
                                else:
                                        ripple = 0
                                DataFilter.perform_highpass(data, f_s, frec_corte, order, tipo, ripple)
                        if (self.pasabanda.isChecked()):
                                nombre_filtro = "PBanda"
                                frec_centro = float(self.frecCorte.text())
                                ancho_banda = float(self.anchoBanda.text())
                                order = int(self.spinBox_orden.value())
                                tipo = int(self.comboBox_tipoFiltro.currentIndex())
                                if (tipo == 1):
                                        ripple = float(self.ripple.text())
                                else:
                                        ripple = 0
                                DataFilter.perform_bandpass(data, f_s, frec_centro, ancho_banda, order, tipo, ripple)
                        if (self.rechazabanda.isChecked()):
                                nombre_filtro = "RB"   
                                frec_centro = float(self.frecCorte.text())
                                ancho_banda = float(self.anchoBanda.text())
                                order = int(self.spinBox_orden.value())
                                tipo = int(self.comboBox_tipoFiltro.currentIndex())
                                if (tipo == 1):
                                        ripple = float(self.ripple.text())
                                else:
                                        ripple = 0
                                DataFilter.perform_bandstop(data, f_s, frec_centro, ancho_banda, order, tipo, ripple)

                        self.señales_importadas_lista += [{"nombre":nombre + "+" + nombre_filtro,"frec":f_s,"datos":data}]
                        self.listWidget_importadas.clearSelection()
                        self.listWidget_importadas.addItem(nombre + "+" + nombre_filtro)
                        self.listWidget_importadas.setCurrentRow(-1)
             
                #EEGcompleto2 = self.señales_importadas_lista[0]["datos"]
                #print(EEGcompleto2[7])
            #self.listWidget_importadas.clearSelection()
            #self.listWidget_importadas.addItem(mi_senal["nombre"] + "+" + nombre_filtro)

            #y_position = np.reshape(senal_filtrada,(1,len(senal_filtrada)))
            #y_position = y_position[0,:]

            #self.señales_importadas_lista += [{"nombre":mi_senal["nombre"]+ "+" + nombre_filtro, "datos":data}]
            #self.hacerFFT(self.señales_importadas_lista[-1])
            #self.listWidget_importadas.setCurrentRow(-1)

    def procesamiento(self):
        
        indice_senal_seleccionada = [item.row() for item in self.listWidget_importadas.selectedIndexes()]
        item = self.listWidget_importadas.currentItem().text()

        if len(indice_senal_seleccionada) != 1:
                print("Tenés que seleccionar una señal a procesar!")
        else:
                if 'Cyton' in item:
                        EEGcompleto = self.señales_importadas_lista[indice_senal_seleccionada[0]]
                        data = np.array(EEGcompleto["datos"], dtype= np.float64)
                        f_s = EEGcompleto["frec"]
                        nombre = EEGcompleto["nombre"]

                        if (self.rolling.isChecked()):
                                nombre_pros = "RF"
                                period = int(self.tamao_ven.text())
                                operation = int(self.comboBox_operation.currentIndex())
                                for i in range (0,8):#Se mueve hasta 8 porque es la cyton pero se tiene que ver que pasa si tiene menos canales o si se trata de la daisy
                                        DataFilter.perform_rolling_filter(data[i], period, operation)

                        if (self.downsampling.isChecked()):
                                nombre_pros = "DS"
                                period = int(self.tamao_ven.text())
                                operation = int(self.comboBox_operation.currentIndex())
                                for i in range (0,8):
                                        downsampled_data = DataFilter.perform_downsampling(data[i], period, operation)
                                data = downsampled_data

                        if (self.windowing.isChecked()):
                                nombre_pros = "WG"
                                period = int(self.tamao_ven.text())
                                operation = int(self.comboBox_ventana.currentIndex())
                                for i in range (0,8):
                                        DataFilter.get_window(data[i],operation,period)

                        self.señales_importadas_lista += [{"nombre":nombre + "+" + nombre_pros,"frec":f_s,"datos":data}]
                        self.listWidget_importadas.clearSelection()
                        self.listWidget_importadas.addItem(nombre + "+" + nombre_pros)
                        self.listWidget_importadas.setCurrentRow(-1)
                else:
                        mi_senal = self.señales_importadas_lista[indice_senal_seleccionada[0]]
                        data = np.array(mi_senal["datos"], dtype= np.float64)
                        f_s = mi_senal["frec"]
                        nombre = mi_senal["nombre"]

                        if (self.rolling.isChecked()):
                                nombre_pros = "RF"
                                period = int(self.tamao_ven.text())
                                operation = int(self.comboBox_operation.currentIndex())
                                DataFilter.perform_rolling_filter(data, period, operation)

                        if (self.downsampling.isChecked()):
                                nombre_pros = "DS"
                                period = int(self.tamao_ven.text())
                                operation = int(self.comboBox_operation.currentIndex())
                                dataDs = DataFilter.perform_downsampling(data, period, operation)
                                data = dataDs

                        if (self.windowing.isChecked()):
                                nombre_pros = "WG"
                                window_function = int(self.comboBox_ventana.currentIndex())
                                window_len = int(self.tamao_ven.text())
                                DataFilter.get_window(data, window_function, window_len)
                        

                        self.señales_importadas_lista += [{"nombre":nombre + "+" + nombre_pros,"frec":f_s,"datos":data}]
                        self.listWidget_importadas.clearSelection()
                        self.listWidget_importadas.addItem(nombre + "+" + nombre_pros)
                        self.listWidget_importadas.setCurrentRow(-1)

    def parameter(self):
            if self.notch.isChecked():
                    self.comboBox_tipoFiltro.setEnabled(False)
                    self.spinBox_orden.setEnabled(False)
                    self.frecMuestreo.setEnabled(False)
                    self.frecCorte.setEnabled(False)
                    self.anchoBanda.setEnabled(False)
                    self.ripple.setEnabled(False)
            if self.pasabajos.isChecked():
                    self.comboBox_tipoFiltro.setEnabled(True)
                    self.spinBox_orden.setEnabled(True)
                    self.frecMuestreo.setEnabled(True)
                    self.frecCorte.setEnabled(True)
                    self.anchoBanda.setEnabled(False)
                    self.ripple.setEnabled(False)
                    self.label_6.setText("Frecuencia de corte:")
            if self.pasaaltos.isChecked():
                    self.comboBox_tipoFiltro.setEnabled(True)
                    self.spinBox_orden.setEnabled(True)
                    self.frecMuestreo.setEnabled(True)
                    self.frecCorte.setEnabled(True)
                    self.anchoBanda.setEnabled(False)
                    self.ripple.setEnabled(False)
                    self.label_6.setText("Frecuencia de corte:")
            if self.pasabanda.isChecked():
                    self.comboBox_tipoFiltro.setEnabled(True)
                    self.spinBox_orden.setEnabled(True)
                    self.frecMuestreo.setEnabled(True)
                    self.frecCorte.setEnabled(True)
                    self.anchoBanda.setEnabled(True)
                    self.ripple.setEnabled(False)
                    self.label_6.setText("Frecuencia central:")
            if self.rechazabanda.isChecked():
                    self.comboBox_tipoFiltro.setEnabled(True)
                    self.spinBox_orden.setEnabled(True)
                    self.frecMuestreo.setEnabled(True)
                    self.frecCorte.setEnabled(True)
                    self.anchoBanda.setEnabled(True)
                    self.ripple.setEnabled(False)
                    self.label_6.setText("Frecuencia central:")

    def parameter2(self):
            tipo = int(self.comboBox_tipoFiltro.currentIndex())
            if tipo == 1:
                    self.ripple.setEnabled(True)
            else:
                    self.ripple.setEnabled(False)

    def parameter3(self):
            if self.rolling.isChecked():
                    self.tamao_ven.setEnabled(True)
                    self.comboBox_ventana.setEnabled(False)
                    self.comboBox_operation.setEnabled(True)
                    self.label_11.setText("Tamaño de la ventana:")
            if self.downsampling.isChecked():
                    self.tamao_ven.setEnabled(True)
                    self.comboBox_ventana.setEnabled(False)
                    self.comboBox_operation.setEnabled(True)
                    self.label_11.setText("Intervalo de submuestreo:")
            if self.windowing.isChecked():
                    self.tamao_ven.setEnabled(True)
                    self.comboBox_ventana.setEnabled(True)
                    self.comboBox_operation.setEnabled(False)
                    self.label_11.setText("Longitud de la ventana:")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
